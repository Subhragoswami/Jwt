List<OrderReconView> views = orderViewRepo.findOrderReconViewByCreatedDate(1709445488000L, 1718123888099L);
        List<MapSqlParameterSource> parameters = views.stream().map(view -> {
            MapSqlParameterSource param = new MapSqlParameterSource();
            param.addValue("SBI_ORDER_REF_NUMBER", view.getSbiOrderRefNumber());
            param.addValue("MERCHANT_ID", view.getMId());
            param.addValue("CUSTOMER_ID", view.getCustomerId());
            param.addValue("CURRENCY_CODE", view.getCurrencyCode());
            param.addValue("ORDER_AMOUNT", view.getOrderAmount());
            param.addValue("ORDER_REF_NUMBER", view.getOrderRefNumber());
            param.addValue("STATUS", view.getStatus());
            param.addValue("EXPIRY", view.getExpiry());
            param.addValue("PAYMENT_MODE", view.getPaymentMode());
            param.addValue("ORDER_HASH", view.getOrderHash());
            param.addValue("RETURN_URL", view.getReturnUrl());
            param.addValue("ORDER_RETRY_COUNT", view.getOrderRetryCount());
            return param;
        }).collect(Collectors.toList());

        String sql = """
            INSERT INTO MERCHANT_ORDERS (
                SBI_ORDER_REF_NUMBER,
                MERCHANT_ID,
                CUSTOMER_ID,
                CURRENCY_CODE,
                ORDER_AMOUNT,
                ORDER_REF_NUMBER,
                STATUS,
                EXPIRY,
                PAYMENT_MODE,
                ORDER_HASH,
                RETURN_URL,
                ORDER_RETRY_COUNT
            ) VALUES (
                :SBI_ORDER_REF_NUMBER,
                :MERCHANT_ID,
                :CUSTOMER_ID,
                :CURRENCY_CODE,
                :ORDER_AMOUNT,
                :ORDER_REF_NUMBER,
                :STATUS,
                :EXPIRY,
                :PAYMENT_MODE,
                :ORDER_HASH,
                :RETURN_URL,
                :ORDER_RETRY_COUNT
            )
        """;

        int[] updateCounts = jdbcTemplate.batchUpdate(sql, parameters.toArray(new MapSqlParameterSource[0]));
        log.info("Inserted {} records into MERCHANT_ORDERS", Arrays.stream(updateCounts).sum());

    } catch (Exception ex) {
        log.error("Error during bulk insert to MERCHANT_ORDERS", ex);
        throw new RuntimeException("Failed to insert orders", ex);
    }

@Getter
@Setter
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "ORDER_RECON_VIEW")
public class OrderReconView {
    @Id
    private String sbiOrderRefNumber;
    @Column(name="MERCHANT_ID")
    private String mId;
    private String customerId;
    private String currencyCode;
    private BigDecimal orderAmount;
    private String orderRefNumber;
    @Enumerated(EnumType.STRING)
    private OrderStatus status;
    @Lob
    private String otherDetails;
    private Long expiry;
    @Lob
    private String multiAccounts;
    private String paymentMode;
    private String orderHash;
    private String returnUrl;
    private Integer orderRetryCount;
    @Lob
    private String thirdPartyDetails;
    private Long createdDate;
    private Long updatedDate;

    private String createdBy;
    private String updatedBy;

}

@Getter
@Setter
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor

@Entity
@Table(name = "MERCHANT_ORDERS")
public class Order  {

        @Id

        private String sbiOrderRefNumber;
        @Column(name="MERCHANT_ID")
        private String mId;
        private String customerId;
        private String currencyCode;
        private BigDecimal orderAmount;
        private String orderRefNumber;

        @Enumerated(EnumType.STRING)
        private OrderStatus status;

        @Lob
        private String otherDetails;
        private Long expiry;

        @Lob
        private String multiAccounts;
        private String paymentMode;
        private String orderHash;
        private String returnUrl;
        private Integer orderRetryCount;

        @Lob
        private String thirdPartyDetails;
        private Long createdDate;
        private Long updatedDate;

        private String createdBy;
        private String updatedBy;

}
Caused by: org.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL [    INSERT INTO MERCHANT_ORDERS (
        SBI_ORDER_REF_NUMBER,
        MERCHANT_ID,
        CUSTOMER_ID,
        CURRENCY_CODE,
        ORDER_AMOUNT,
        ORDER_REF_NUMBER,
        STATUS,
        EXPIRY,
        PAYMENT_MODE,
        ORDER_HASH,
        RETURN_URL,
        ORDER_RETRY_COUNT
    ) VALUES (
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?
    )
]; SQL state [99999]; error code [17004]; ORA-17004: Invalid column type
