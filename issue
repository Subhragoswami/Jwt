{
    "status": 0,
    "errors": [
        {
            "errorCode": "500",
            "errorMessage": "Can't convert value of class com.epay.merchant.dto.MerchantEmailDto to class org.apache.kafka.common.serialization.StringSerializer specified in value.serializer"
        }
    ]
}





@Bean
public ProducerFactory<String, MerchantEmailDto> producerFactory() {
    Map<String, Object> configProps = new HashMap<>();
    configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
    configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
    configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class); // Use JSON serializer
    return new DefaultKafkaProducerFactory<>(configProps);
}

@Bean
public KafkaTemplate<String, MerchantEmailDto> kafkaTemplate() {
    return new KafkaTemplate<>(producerFactory());
}


@Component
@RequiredArgsConstructor
public class KafkaProducer {

    private final KafkaTemplate<String, MerchantEmailDto> kafkaTemplate; // Updated type

    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());

    public void sendEmail(MerchantEmailDto emailDto) {
        sendMessage(producerConfig.getTopicEmail(), emailDto);
    }

    private void sendMessage(String topic, MerchantEmailDto message) {
        log.info("Publishing message on Kafka topic: {}", topic);
        kafkaTemplate.send(topic, message)
            .addCallback(
                result -> log.info("Message [{}] sent to topic [{}] with offset [{}]", message, topic, result.getRecordMetadata().offset()),
                ex -> log.error("Unable to send message [{}] to topic [{}]: {}", message, topic, ex.getMessage())
            );
    }
}
