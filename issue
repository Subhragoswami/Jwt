public void validateMid(String mId) {
        logger.debug("Request Validation start for {}", mId);
        errorDtoList = new ArrayList<>();
        checkMandatoryField(mId, MID);
        throwIfErrors();
        checkForLeadingTrailingAndSingleSpace(mId, MID);
        throwIfErrors();
        validateFixedFieldLength(mId,MID_LENGTH,MID);
        throwIfErrors();
        validateFieldWithRegex(mId, MID_REGEX, MID, INVALID_FORMAT);
        throwIfErrors();
        logger.debug("Request Validation end for {}", mId);
    }

public void validateMId(String mId) {
        validateMid(mId);
        String userName = EPayIdentityUtil.getUserPrincipal().getUsername();
        List<MerchantInfoDto> merchantInfoForMerchantUser = merchantInfoDao.getAllAccessMerchantInfoForMerchantUser(userName);
        List<String> validMIds = merchantInfoForMerchantUser.stream().filter(m -> MerchantStatus.ACTIVE.name().equalsIgnoreCase(m.getStatus())).map(MerchantInfoDto::getMId).toList();
        if (validMIds.contains(mId)) {
            return;
        }
        throw new ValidationException(INVALID_ERROR_CODE, MessageFormat.format(INVALID_ERROR_MESSAGE, MID, INVALID_MID_ERROR_MESSAGE));
    }

public void validateMerchantAccountRequest(MerchantBankAccountRequest merchantBankAccountRequest, boolean isCreate) {
        logger.debug("Merchant bank account details validation start for {}", merchantBankAccountRequest);
        errorDtoList = new ArrayList<>();
        validatedMandatoryFields(merchantBankAccountRequest);
        checkLeadingTrailingAndSingleSpace(merchantBankAccountRequest);
        validateFieldsValue(merchantBankAccountRequest);
        validateRequestValues(merchantBankAccountRequest);
        validateMId(merchantBankAccountRequest.getMId());
        if (isCreate) {
            validateAccountUniqueIdentifier(merchantBankAccountRequest);
        } else {
            validateAccountUniqueIdentifierForUpdate(merchantBankAccountRequest);
        }
        validateBankDetails(merchantBankAccountRequest);
        logger.debug("Merchant bank account details validation completed for {}", merchantBankAccountRequest);
    }

Expected :null
Actual   :4002
<Click to see difference>

org.opentest4j.AssertionFailedError: expected: <null> but was: <4002>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1145)
	at com.epay.merchant.validator.MerchantBankAccountValidatorTest.testValidateMerchantAccountRequest_inCorrectAccountNo(MerchantBankAccountValidatorTest.java:197)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)

@Test
    void testValidateMerchantAccountRequest_inCorrectAccountNo() {
        MerchantBankAccountDto dbMerchantBankAccount = MerchantBankAccountDto.builder().accountUniqueIdentifier("asddadadsa454").accountNumber("123456789").build();
        // Arrange
        MerchantBankAccountRequest request = MerchantBankAccountRequest.builder().mId("123").bankName("Test Bank").branchName("Test Branch").ifscCode("TEST000000").accountType("SAVING").accountNumber("1234567890").accountHolderName("Test Account Holder").accountUniqueIdentifier("unique123").build();
        List<MerchantInfoDto> merchantInfoForMerchantUser = List.of(new MerchantInfoDto("mid123", "aregtaerta", "ACTIVE", 4), new MerchantInfoDto("mid123", "aregtaerta", "ACTIVE", 4));
        when(merchantBankDao.isExistByAccountUniqueIdentifier(anyString())).thenReturn(false);
        when(merchantBankDao.isExistByAccountNumber(anyString())).thenReturn(false);
        when(merchantInfoDao.getAllAccessMerchantInfoForMerchantUser("userName")).thenReturn(merchantInfoForMerchantUser);
        when(merchantConfig.getDecryptionKey()).thenReturn("decryptvalue");
        SecurityContextHolder.getContext().setAuthentication(mock(Authentication.class));
        when(SecurityContextHolder.getContext().getAuthentication().getPrincipal()).thenReturn(mockPrincipal);
        try (MockedStatic<EPayIdentityUtil> mocked = Mockito.mockStatic(EPayIdentityUtil.class, Mockito.CALLS_REAL_METHODS)) {
            mocked.when(() -> EPayIdentityUtil.getUserPrincipal().getUsername()).thenReturn("userName");
        }
        MerchantResponse<String> merchantResponse = MerchantResponse.<String>builder().data(List.of("data")).status(1).build();
        when(adminServicesClient.validateBankDetails(request.getBankName(), request.getBranchName(), request.getIfscCode())).thenReturn(merchantResponse.getData());
        merchantBankAccountApprovalRequest.setAccountUniqueIdentifier("asddadadsa454");
        when(merchantBankDao.getAccountByAccountUniqueIdentifier(request.getAccountUniqueIdentifier())).thenReturn(dbMerchantBankAccount);
        ValidationException exception = assertThrows(ValidationException.class, () -> {
            merchantBankAccountValidator.validateMerchantAccountRequest(request, false);
        });
        assertEquals(exception.getErrorCode(), ErrorConstants.INVALID_ERROR_CODE);
    }
