package com.epay.merchant.validator;


@RequiredArgsConstructor
@Component
public class MerchantBankAccountValidator extends BaseValidator {
    private final LoggerUtility logger = LoggerFactoryUtility.getLogger(this.getClass());
    private final MerchantBankDao merchantBankDao;
    private final MerchantInfoDao merchantInfoDao;
    private final AdminServicesClient adminServicesClient;
    private final MerchantConfig merchantConfig;
    private final MerchantUserValidator merchantUserValidator;

    
    public void validateMId(String mId) {
        merchantUserValidator.validateMid(mId);
        String userName = EPayIdentityUtil.getUserPrincipal().getUsername();
        List<MerchantInfoDto> merchantInfoForMerchantUser = merchantInfoDao.getAllAccessMerchantInfoForMerchantUser(userName);
        List<String> validMIds = merchantInfoForMerchantUser.stream().filter(m -> MerchantStatus.ACTIVE.name().equalsIgnoreCase(m.getStatus())).map(MerchantInfoDto::getMId).toList();
        if (validMIds.contains(mId)) {
            return;
        }
        throw new ValidationException(INVALID_ERROR_CODE, MessageFormat.format(INVALID_ERROR_MESSAGE, MID, INVALID_MID_ERROR_MESSAGE));
    }

   
@Component
@RequiredArgsConstructor
public class MerchantUserValidator extends BaseValidator {

    private final LoggerUtility logger = LoggerFactoryUtility.getLogger(this.getClass());

    private final MerchantUserDao merchantUserDao;
    private final MerchantInfoDao merchantInfoDao;
    private final OtpManagementDao otpManagementDao;
    private final MerchantBankAccountValidator merchantBankAccountValidator;

    
    public void validateMidAndAccess(String mId) {
        errorDtoList = new ArrayList<>();
        validateMid(mId);
        merchantBankAccountValidator.validateMId(mId);
    }

    /**
     * Validates a report management request by checking mandatory fields and their values.
     * Also validates the MId.
     *
     * @param mId The request containing mId.
     * @throws ValidationException if any validation fails.
     */
    public void validateMid(String mId) {
        logger.debug("Request Validation start for {}", mId);
        errorDtoList = new ArrayList<>();
        checkMandatoryField(mId, MID);
        throwIfErrors();
        checkForLeadingTrailingAndSingleSpace(mId, MID);
        throwIfErrors();
        validateFixedFieldLength(mId,MID_LENGTH,MID);
        throwIfErrors();
        validateFieldWithRegex(mId, MID_REGEX, MID, INVALID_FORMAT);
        throwIfErrors();
        logger.debug("Request Validation end for {}", mId);
    }
}

The dependencies of some of the beans in the application context form a cycle:

   adminController defined in file [C:\Users\v1014352\E-Pay\epay_merchant_service\build\classes\java\main\com\epay\merchant\controller\AdminController.class]
      ↓
   adminService defined in file [C:\Users\v1014352\E-Pay\epay_merchant_service\build\classes\java\main\com\epay\merchant\service\AdminService.class]
      ↓
   adminValidator defined in file [C:\Users\v1014352\E-Pay\epay_merchant_service\build\classes\java\main\com\epay\merchant\validator\AdminValidator.class]
┌─────┐
|  merchantUserValidator defined in file [C:\Users\v1014352\E-Pay\epay_merchant_service\build\classes\java\main\com\epay\merchant\validator\MerchantUserValidator.class]
↑     ↓
|  merchantBankAccountValidator defined in file [C:\Users\v1014352\E-Pay\epay_merchant_service\build\classes\java\main\com\epay\merchant\validator\MerchantBankAccountValidator.class]
└─────┘
