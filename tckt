Merchant - User Management - List of User for Merchant for SBI Admin
Open
Merchant - User Management - List of User for Merchant for SBI Admin
Open
 Issue
created
20 hours ago
by
Ranu Jain
Description
This API allows SBI Admins to retrieve a list of users associated with a given Merchant. It is accessible via the SBI Admin portal and requires a valid Merchant Access Token issued for the admin. 

API Details
Method: GET
API Definition: /v1/merchant/admin/users/{mId}
Access Type: Merchant Access Token for Admin Access
Request Details 
Path Parameter:  mid: (String) The Merchant ID, used to identify the merchant account. 

Query Parameters

page: (Integer) Optional. The page number for pagination. Defaults to 0 if not provided. 
size: (Integer) Optional. The size of the page. Default value is 50, with a minimum value of 50 and a maximum value of 100 (configured in application properties). 
Headers:  Authorization: Bearer token (Merchant Access Token) 

Request Body: NA
Success Response Body
{
  "data": [
    {
      "mid": "String", 
      "userName": "String", 
      "firstName": "String", 
      "middleName": "String", 
      "lastName": "String", 
      "email": "String", 
      "primaryPhone": "String", 
      "secondaryPhone": "String", 
      "mobilePhone": "String", 
      "addressLine1": "String", 
      "addressLine2": "String", 
      "state": "String", 
      "city": "String", 
      "country": "String", 
      "pincode": "String", 
      "role": "String", 
      "status": "String" // ACTIVE, INACTIVE, etc. 
    }, 
    {
      "mid": "String", 
      "userName": "String", 
      "firstName": "String", 
      "middleName": "String", 
      "lastName": "String", 
      "email": "String", 
      "primaryPhone": "String", 
      "secondaryPhone": "String", 
      "mobilePhone": "String", 
      "addressLine1": "String", 
      "addressLine2": "String", 
      "state": "String", 
      "city": "String", 
      "country": "String", 
      "pincode": "String", 
      "role": "String", 
      "status": "String" // ACTIVE, INACTIVE, etc. 
    }
   ],
  "status":1,
  "count": 2,
  "total": 10
}
Failure Response Body
{
  "status":0,
  "error": [
     {
       "errorCode": String,
       "errorMessage": String
     }
   ]
}
Response Fields: 

mid: Merchant ID for which the users are retrieved. 
userName: Username of the user. 
firstName, middleName, lastName: Name details of the user. 
email: User's registered email address. 
primaryPhone, secondaryPhone, mobilePhone: Contact numbers. 
addressLine1, addressLine2, state, city, country, pincode: User's address details. 
role: User's role (e.g., Admin, Super Admin, User). 
status: Status of the user account (e.g., ACTIVE, INACTIVE). 
Development Steps 

Create Controller Endpoint: 

Define the endpoint GET /v1/merchant/admin/users/{mid} in the AdminController. 

Validate the mid path parameter and the Authorization header using the Authorization Service. 

Service Layer Implementation: 

Ensure the merchant is valid and active. 

Retrieve the list of users associated with the merchant ID. 

Repository Layer Implementation: 

Use a repository query to fetch all users linked to the given mid. 

Optimize the query for performance, especially when handling merchants with a large user base. 

Response Handling: 

Structure the response as per the success or failure schema. 

Support pagination using page and size query parameters. 

Error Handling: 

Return descriptive error messages for invalid or inactive merchants. 

Handle cases where no users are associated with the merchant. 

 

Testing Checklist 

Functional Tests: 

Ensure the API returns the correct list of users for a valid mid. 

Test with merchants who have no associated users. 

Negative Tests: 

Validate behavior with invalid or inactive mid. 

Verify API responses with expired or invalid Merchant Access Tokens. 

Performance Tests: 

Test API performance with a large dataset to ensure efficient query execution and response time. 

Integration Tests: 

Validate the API's integration with the database and Authorization Service. 

 

Developer Checklist 

Ensure at least 90%-unit test coverage.

Implement logging for: 

Request and response payloads 

Errors and exceptions 

Verify data security: 

Secure Merchant Access Token validation. 

Protect sensitive user data in logs and responses. 
