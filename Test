 public MerchantResponse<MerchantUserResponse> updateUserStatus(String userName, UserStatus status){
        MerchantUserResponse merchantUserResponse = merchantUserDao.updateUserStatusByUserName(userName, status);
        return MerchantResponse.<MerchantUserResponse>builder().data(List.of(merchantUserResponse)).status(MerchantConstant.RESPONSE_SUCCESS).count(1L).total(1L).build();
    }

package com.epay.merchant.util.enums;

import com.epay.merchant.exception.MerchantException;
import com.epay.merchant.util.ErrorConstants;

import java.text.MessageFormat;
import java.util.Arrays;

public enum UserStatus {
    ACTIVE, INACTIVE, BLOCKED, EXPIRED;

    public static UserStatus getStatus(String status) {
        return Arrays.stream(values()).filter(s -> s.name().equalsIgnoreCase(status)).findFirst()
                .orElseThrow(() ->
                        new MerchantException(
                                ErrorConstants.INVALID_ERROR_CODE,
                                MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE, "UserStatus", "Valid Status are "+ Arrays.toString(UserStatus.values()))));
    }
}
    @Transactional
    public MerchantUserResponse updateUserStatusByUserName(String userName, UserStatus status) {
        MerchantUser merchantUser = null;
        if (merchantUserRepository.existsByUserNameOrEmailOrMobilePhone(userName, userName, userName)) {
            merchantUser = merchantUserRepository.updateStatusByUserNameUserNameOrEmailOrMobilePhone(status, userName, userName, userName);
        }
        return merchantMapper.mapMerchantUserEntityToResponse(merchantUser);
    }

 MerchantUser updateStatusByUserNameUserNameOrEmailOrMobilePhone(UserStatus status, String userName, String email, String mobilePhone);
