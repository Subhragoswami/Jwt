@AllArgsConstructor
@Getter
@Setter
@ToString
@Builder
@NoArgsConstructor
public class PasswordChangeRequest{
    private String userName;
    private String oldPassword;
    private String newPassword;
    private String confirmPassword;
}


package com.epay.merchant.util;

import com.sbi.epay.encryptdecrypt.service.DecryptionService;
import com.sbi.epay.encryptdecrypt.service.HashingService;
import com.sbi.epay.encryptdecrypt.util.enums.EncryptionDecryptionAlgo;
import com.sbi.epay.encryptdecrypt.util.enums.GCMIvLength;
import com.sbi.epay.encryptdecrypt.util.enums.GCMTagLength;
import com.sbi.epay.encryptdecrypt.util.enums.HashAlgorithm;

import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class EncryptionDecryptionUtil {

    public static String hashValue(String value) {
        byte[] bytes = HashingService.generateHash(value.getBytes(StandardCharsets.UTF_8), HashAlgorithm.SHA_512);
        return Base64.getEncoder().encodeToString(bytes);
    }

    public static String decryptValue(String key, String value) {
        return DecryptionService.decryptValueByStringKey(key, value, EncryptionDecryptionAlgo.AES_GCM_NO_PADDING, GCMIvLength.MAXIMUM, GCMTagLength.STANDARD);
    }
}


@Repository
@RequiredArgsConstructor
public class PasswordManagementDao {
    private final MerchantUserDao merchantUserDao;
    private final PasswordManagementRepository passwordManagementRepository;
    private final NotificationDao notificationDao;

    public MerchantUserDto findByUserNameOrEmailOrMobilePhoneAndStatus(String userName, UserStatus userStatus) {
        return merchantUserDao.getByUserNameOrEmailOrMobilePhoneAndStatus(userName, userName, userName, userStatus);
    }

    public List<PasswordManagement> findLastPasswordsByUserId(UUID userId) {
        return passwordManagementRepository.findByUserIdOrderByCreatedAtDesc(userId, PageRequest.of(0, 5));
    }

    @Transactional
    public void updatePasswordDetails(String userName, String newPassword, UserStatus userStatus, RequestType requestType) {
        // Step 1 : Prepare the Password Hash value
        String passwordHash = hashValue(newPassword);

        // Step 2 : Update the Merchant User with Password Information
        MerchantUserDto merchantUser = merchantUserDao.updateMerchantUserForPassword(userName, passwordHash, userStatus);

        // Step 3 : Update previous Password status in Password Management
        updatePreviousPasswordStatus(merchantUser.getId());

        // Step 4 : Save new Password information in Password Management
        PasswordManagement passwordManagement = saveUpdatesPasswordDetails(merchantUser.getId(), passwordHash);

        // Step 5 : Send Notification to user for Password Update
        sendNotification(requestType, passwordManagement.getId(), "Password has been modified successfully, New Password is " + newPassword, MerchantConstant.RESPONSE_SUCCESS, NotificationType.EMAIL);
    }

    private void updatePreviousPasswordStatus(UUID userId) {
        List<PasswordManagement> passwordList = passwordManagementRepository.findByUserIdAndStatus(userId, PasswordStatusType.COMPLETED);
        passwordList.forEach(passwordManagement -> passwordManagement.setStatus(PasswordStatusType.INACTIVE));
        passwordManagementRepository.saveAll(passwordList);
    }

    private PasswordManagement saveUpdatesPasswordDetails(UUID userId, String password) {
        return passwordManagementRepository.save(PasswordManagement.builder().userId(userId).status(PasswordStatusType.COMPLETED).previousPassword(password).requestType(PasswordManagementType.CHANGE_PASSWORD).build());
    }

    private void sendNotification(RequestType requestType, UUID entityId, String content, int status, NotificationType notificationType) {
        notificationDao.sendPasswordNotification(requestType, entityId, content, status, notificationType);
    }

}


   public MerchantUserDto updateMerchantUserForPassword(String userName, String password, UserStatus userStatus) {
        MerchantUser merchantUser = getMerchantUserByStatus(userName, userName, userName, userStatus);
        merchantUser.setPassword(EncryptionDecryptionUtil.hashValue(password));
        merchantUser.setLastPasswordChange(DateTimeUtils.getCurrentTimeInMills());
        merchantUser.setPasswordExpiryTime(DateTimeUtils.getFutureDateByMonth(merchantConfig.getPasswordExpiryMonths()));
        merchantUser.setStatus(UserStatus.ACTIVE);
        merchantUser = save(merchantUser);
        return merchantMapper.mapMerchantUserEntityToDto(merchantUser);
    }

@Service
@RequiredArgsConstructor
public class PasswordService {

    private final PasswordValidator passwordValidator;
    private final PasswordManagementDao passwordManagementDao;
    private final MerchantConfig merchantConfig;
    LoggerUtility log = LoggerFactoryUtility.getLogger(ValidationController.class);

    /**
     * Method to handle the password change logic
     */
    public MerchantResponse<String> changePassword(PasswordChangeRequest passwordChangeRequest) {
        log.info("Starting password change process for user: {}", passwordChangeRequest.getUserName());
        // Step 1 : Decrypt Password
        passwordChangeRequest.setNewPassword(decryptValue(merchantConfig.getDecryptionKey(), passwordChangeRequest.getNewPassword()));
        passwordChangeRequest.setConfirmPassword(decryptValue(merchantConfig.getDecryptionKey(), passwordChangeRequest.getConfirmPassword()));

        // Step 2: Validate the password change request
        validatePasswordChange(passwordChangeRequest);
        log.info("Password change request validated successfully");

        // Step 3: Update the password details in the database
        passwordManagementDao.updatePasswordDetails(passwordChangeRequest.getUserName(), passwordChangeRequest.getNewPassword(), UserStatus.EXPIRED, RequestType.CHANGE_PASSWORD);

        // Step 4: Build and return the success response
        return MerchantResponse.<String>builder().status(MerchantConstant.RESPONSE_SUCCESS).data(List.of("Password Changed Successfully")).count(1L).total(1L).build();
    }

    /**
     * Method to handle the reset password logic
     */
    public MerchantResponse<String> resetPassword(PasswordResetRequest passwordResetRequest) {
        log.info("Starting password change process for user: {}", passwordResetRequest.getUserName());
        // Step 1 : Decrypt Password
        passwordResetRequest.setNewPassword(decryptValue(merchantConfig.getDecryptionKey(), passwordResetRequest.getNewPassword()));
        passwordResetRequest.setConfirmPassword(decryptValue(merchantConfig.getDecryptionKey(), passwordResetRequest.getConfirmPassword()));

        // Step 2: Validate the password change request
        validatePasswordReset(passwordResetRequest);
        log.info("Password change request validated successfully");

        // Step 3: Update the password details in the database
        passwordManagementDao.updatePasswordDetails(passwordResetRequest.getUserName(), passwordResetRequest.getNewPassword(), UserStatus.ACTIVE, RequestType.RESET_PASSWORD);

        // Step 4: Build and return the success response
        return MerchantResponse.<String>builder().status(MerchantConstant.RESPONSE_SUCCESS).data(List.of("Password Reset Successfully")).count(1L).total(1L).build();
    }

    private void validatePasswordChange(PasswordChangeRequest passwordChangeRequest) {
        passwordValidator.validatePasswordChangeRequest(passwordChangeRequest);
        MerchantUserDto merchantUser = passwordManagementDao.findByUserNameOrEmailOrMobilePhoneAndStatus(passwordChangeRequest.getUserName(), UserStatus.EXPIRED);
        String passwordHashValue = hashValue(passwordChangeRequest.getNewPassword());
        passwordValidator.validatePasswordUpdateWithDB(merchantUser, passwordHashValue, passwordChangeRequest.getOldPassword());
    }

    private void validatePasswordReset(PasswordResetRequest passwordResetRequest) {
        passwordValidator.validateResetPasswordRequest(passwordResetRequest);
        MerchantUserDto merchantUser = passwordManagementDao.findByUserNameOrEmailOrMobilePhoneAndStatus(passwordResetRequest.getUserName(), UserStatus.ACTIVE);
        String passwordHashValue = hashValue(passwordResetRequest.getNewPassword());
        passwordValidator.validatePasswordUpdateWithDB(merchantUser, passwordHashValue);
    }
}


@Component
@RequiredArgsConstructor
public class PasswordValidator extends BaseValidator {

    private final PasswordManagementDao passwordManagementDao;
    LoggerUtility log = LoggerFactoryUtility.getLogger(ValidationController.class);

    public void validatePasswordChangeRequest(PasswordChangeRequest passwordChangeRequest) {
        log.info("Validating password change request");
        errorDtoList = new ArrayList<>();
        validateMandatoryFields(passwordChangeRequest);
        throwIfErrors();
        validatePasswordValue(passwordChangeRequest.getNewPassword(), passwordChangeRequest.getConfirmPassword());
        throwIfErrors();
    }

    public void validateResetPasswordRequest(PasswordResetRequest passwordResetRequest) {
        log.info("Validating password change request");
        errorDtoList = new ArrayList<>();
        validateMandatoryFields(passwordResetRequest);
        validatePasswordValue(passwordResetRequest.getNewPassword(), passwordResetRequest.getConfirmPassword());
    }

    public void validatePasswordUpdateWithDB(MerchantUserDto merchantUser, String newPassword, String oldPassword) {
        errorDtoList = new ArrayList<>();
        passwordCheck(!merchantUser.getPassword().equals(oldPassword), ErrorConstants.OLD_PASSWORD, ErrorConstants.ERROR_OLD_PASSWORD_MISMATCH);
        passwordCheck(newPassword.equals(oldPassword), ErrorConstants.NEW_PASSWORD, ErrorConstants.ERROR_NEW_PASSWORD_SAME_AS_OLD);
        passwordWithOldPasswords(merchantUser, newPassword);
    }


    public void validatePasswordUpdateWithDB(MerchantUserDto merchantUser, String newPassword) {
        errorDtoList = new ArrayList<>();
        passwordWithOldPasswords(merchantUser, newPassword);
    }

    private void validateMandatoryFields(PasswordChangeRequest passwordChangeRequest) {
        log.info("Validating mandatory fields");
        checkMandatoryField(passwordChangeRequest.getUserName(), ErrorConstants.USER_NAME);
        checkMandatoryField(passwordChangeRequest.getOldPassword(), ErrorConstants.OLD_PASSWORD);
        checkMandatoryField(passwordChangeRequest.getNewPassword(), ErrorConstants.NEW_PASSWORD);
        checkMandatoryField(passwordChangeRequest.getConfirmPassword(), ErrorConstants.CONFIRM_PASSWORD);
        throwIfErrors();
    }

    private void validateMandatoryFields(PasswordResetRequest passwordResetRequest) {
        log.info("Validating mandatory fields");
        checkMandatoryField(passwordResetRequest.getUserName(), ErrorConstants.USER_NAME);
        checkMandatoryField(passwordResetRequest.getNewPassword(), ErrorConstants.NEW_PASSWORD);
        checkMandatoryField(passwordResetRequest.getConfirmPassword(), ErrorConstants.CONFIRM_PASSWORD);
        throwIfErrors();
    }

    private void validatePasswordValue(String newPassword, String confirmPassword) {
        if (!newPassword.matches(PASSWORD_REGEX)) {
            errorDtoList.add(ErrorDto.builder().errorCode(ErrorConstants.INVALID_ERROR_CODE).errorMessage(MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE, ErrorConstants.NEW_PASSWORD, "Reason : New password does not meet the acceptance criteria")).build());
        }
        passwordCheck(!newPassword.equals(confirmPassword), ErrorConstants.PASSWORD, ErrorConstants.ERROR_NEW_AND_CONFIRM_PASSWORD_MISMATCH);
        throwIfErrors();
    }

    private void passwordCheck(boolean isValid, String field, String reason) {
        if (isValid) {
            errorDtoList.add(ErrorDto.builder().errorCode(ErrorConstants.INVALID_ERROR_CODE).errorMessage(MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE, field, reason)).build());
        }
        throwIfErrors();
    }

    private void passwordWithOldPasswords(MerchantUserDto merchantUser, String newPassword) {
        List<PasswordManagement> lastFiveRecords = passwordManagementDao.findLastPasswordsByUserId(merchantUser.getId());
        lastFiveRecords.stream().filter(previousPassword -> previousPassword.getPreviousPassword().equals(newPassword)).forEachOrdered(previousPassword -> errorDtoList.add(ErrorDto.builder().errorCode(ErrorConstants.INVALID_ERROR_CODE).errorMessage(MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE, ErrorConstants.NEW_PASSWORD, ErrorConstants.ERROR_NEW_PASSWORD_REUSED)).build()));
        throwIfErrors();
    }
}

 private void passwordCheck(boolean isValid, String field, String reason) {
        if (isValid) {
            errorDtoList.add(ErrorDto.builder().errorCode(ErrorConstants.INVALID_ERROR_CODE).errorMessage(MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE, field, reason)).build());
        }
        throwIfErrors();
    }

    private void passwordWithOldPasswords(MerchantUserDto merchantUser, String newPassword) {
        List<PasswordManagement> lastFiveRecords = passwordManagementDao.findLastPasswordsByUserId(merchantUser.getId());
        lastFiveRecords.stream().filter(previousPassword -> previousPassword.getPreviousPassword().equals(newPassword)).forEachOrdered(previousPassword -> errorDtoList.add(ErrorDto.builder().errorCode(ErrorConstants.INVALID_ERROR_CODE).errorMessage(MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE, ErrorConstants.NEW_PASSWORD, ErrorConstants.ERROR_NEW_PASSWORD_REUSED)).build()));
        throwIfErrors();
    }
   public void validatePasswordUpdateWithDB(MerchantUserDto merchantUser, String newPassword, String oldPassword) {
        errorDtoList = new ArrayList<>();
        passwordCheck(!merchantUser.getPassword().equals(oldPassword), ErrorConstants.OLD_PASSWORD, ErrorConstants.ERROR_OLD_PASSWORD_MISMATCH);
        passwordCheck(newPassword.equals(oldPassword), ErrorConstants.NEW_PASSWORD, ErrorConstants.ERROR_NEW_PASSWORD_SAME_AS_OLD);
        passwordWithOldPasswords(merchantUser, newPassword);
    }
