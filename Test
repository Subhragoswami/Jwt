package com.epay.merchant.controller;

import com.epay.merchant.model.response.MerchantInfoResponse;
import com.epay.merchant.model.response.MerchantResponse;
import com.epay.merchant.service.MerchantInfoService;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/merchant")
@RequiredArgsConstructor
public class MerchantController {

    private final MerchantInfoService merchantInfoService;

    @GetMapping("/info/mids")
    public MerchantResponse<MerchantInfoResponse> getAllMerchantInfo( @PageableDefault(size = 50, page = 0) Pageable pageable){
        return merchantInfoService.getAllMerchantInfo(pageable);
    }
}


package com.epay.merchant.service;

import com.epay.merchant.dao.MerchantInfoDao;
import com.epay.merchant.dto.MerchantInfoDto;
import com.epay.merchant.mapper.MerchantMapper;
import com.epay.merchant.model.response.MerchantInfoResponse;
import com.epay.merchant.model.response.MerchantResponse;
import com.epay.merchant.util.MerchantConstant;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class MerchantInfoService {

    private final MerchantInfoDao merchantInfoDao;
    private final MerchantMapper merchantMapper;

    public MerchantResponse<MerchantInfoResponse> getAllMerchantInfo(Pageable pageable) {
        Page<MerchantInfoDto> merchantInfo = merchantInfoDao.getALl(pageable);
        List<MerchantInfoResponse> merchantInfoResponseList = merchantMapper.mapMerchantInfoDTOListToResponseList(merchantInfo.getContent());
        return MerchantResponse.<MerchantInfoResponse>builder().status(MerchantConstant.RESPONSE_SUCCESS).data(merchantInfoResponseList).count(merchantInfo.stream().count()).total(merchantInfo.getTotalElements()).build();
    }
}
package com.epay.merchant.mapper;

import com.epay.merchant.dto.MerchantDto;
import com.epay.merchant.dto.MerchantInfoDto;
import com.epay.merchant.dto.MerchantUserDto;
import com.epay.merchant.entity.MerchantInfo;
import com.epay.merchant.entity.MerchantUser;
import com.epay.merchant.model.response.MerchantInfoResponse;
import com.epay.merchant.model.response.MerchantUserResponse;
import org.mapstruct.AfterMapping;
import org.mapstruct.Builder;
import org.mapstruct.Mapper;
import org.mapstruct.MappingTarget;

import java.util.List;

@Mapper(builder = @Builder(disableBuilder = true), componentModel = "spring")
public interface MerchantMapper {
    MerchantUser mapMerchantUserDtoToEntity(MerchantUserDto merchantUserDto);
    @AfterMapping
    default void afterMapMerchantUserDtoToEntity(MerchantUserDto merchantUserDto, @MappingTarget MerchantUser merchantUser) {
        merchantUser.setMId(merchantUserDto.getMId());
    }

    MerchantUserDto mapMerchantUserEntityToDto(MerchantUser merchantUser);
    @AfterMapping
    default void afterMapMerchantUserEntityToDto(MerchantUser merchantUser, @MappingTarget MerchantUserDto merchantUserDto) {
        merchantUserDto.setMId(merchantUser.getMId());
    }

    List<MerchantUserResponse> mapMerchantUserDTOListToResponseList(List<MerchantUserDto> merchantUserDtos);

    MerchantInfo mapMerchantDtoToEntity(MerchantDto merchant);
    @AfterMapping
    default void afterMapMerchantDtoToEntity(MerchantDto merchantDto, @MappingTarget MerchantInfo merchantInfo) {
        merchantInfo.setMId(merchantDto.getMId());
        merchantInfo.setChargebackAllowed(merchantDto.isChargebackAllowed());
    }

    MerchantDto mapMerchantInfoEntityToDto(MerchantInfo merchantInfo);
    @AfterMapping
    default void afterMapMerchantInfoEntityToDto(MerchantInfo merchantInfo, @MappingTarget MerchantDto merchantDto) {
        merchantDto.setMId(merchantInfo.getMId());
        merchantDto.setChargebackAllowed(merchantInfo.isChargebackAllowed());
    }

    MerchantInfoDto mapMerchantInfoEntityToMerchantInfoDto(MerchantInfo merchantInfo);

    List<MerchantInfoResponse> mapMerchantInfoDTOListToResponseList(List<MerchantInfoDto> MerchantInfoDtos);
}

package com.epay.merchant.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class MerchantInfoDto {
    private String mId;
    private String merchantName;
    private String status;
}
package com.epay.merchant.dao;

import com.epay.merchant.dto.MerchantInfoDto;
import com.epay.merchant.entity.MerchantInfo;
import com.epay.merchant.mapper.MerchantMapper;
import com.epay.merchant.repository.MerchantInfoRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Repository;

@Repository
@RequiredArgsConstructor
public class MerchantInfoDao {
    private final MerchantInfoRepository merchantInfoRepository;
    private final MerchantMapper mapper;

    public Page<MerchantInfoDto> getALl(Pageable pageable){
       return merchantInfoRepository.findAll(pageable).map(this::convertEntityToDTO);
    }

    private MerchantInfoDto convertEntityToDTO(MerchantInfo merchantInfo) {
        return mapper.mapMerchantInfoEntityToMerchantInfoDto(merchantInfo);
    }
}



package com.epay.merchant.mapper;

import com.epay.merchant.dto.MerchantDto;
import com.epay.merchant.dto.MerchantInfoDto;
import com.epay.merchant.dto.MerchantUserDto;
import com.epay.merchant.entity.MerchantInfo;
import com.epay.merchant.entity.MerchantUser;
import com.epay.merchant.model.response.MerchantInfoResponse;
import com.epay.merchant.model.response.MerchantUserResponse;
import org.mapstruct.AfterMapping;
import org.mapstruct.Builder;
import org.mapstruct.Mapper;
import org.mapstruct.MappingTarget;

import java.util.List;

@Mapper(builder = @Builder(disableBuilder = true), componentModel = "spring")
public interface MerchantMapper {
    MerchantUser mapMerchantUserDtoToEntity(MerchantUserDto merchantUserDto);
    @AfterMapping
    default void afterMapMerchantUserDtoToEntity(MerchantUserDto merchantUserDto, @MappingTarget MerchantUser merchantUser) {
        merchantUser.setMId(merchantUserDto.getMId());
    }

    MerchantUserDto mapMerchantUserEntityToDto(MerchantUser merchantUser);
    @AfterMapping
    default void afterMapMerchantUserEntityToDto(MerchantUser merchantUser, @MappingTarget MerchantUserDto merchantUserDto) {
        merchantUserDto.setMId(merchantUser.getMId());
    }

    List<MerchantUserResponse> mapMerchantUserDTOListToResponseList(List<MerchantUserDto> merchantUserDtos);

    MerchantInfo mapMerchantDtoToEntity(MerchantDto merchant);
    @AfterMapping
    default void afterMapMerchantDtoToEntity(MerchantDto merchantDto, @MappingTarget MerchantInfo merchantInfo) {
        merchantInfo.setMId(merchantDto.getMId());
        merchantInfo.setChargebackAllowed(merchantDto.isChargebackAllowed());
    }

    MerchantDto mapMerchantInfoEntityToDto(MerchantInfo merchantInfo);
    @AfterMapping
    default void afterMapMerchantInfoEntityToDto(MerchantInfo merchantInfo, @MappingTarget MerchantDto merchantDto) {
        merchantDto.setMId(merchantInfo.getMId());
        merchantDto.setChargebackAllowed(merchantInfo.isChargebackAllowed());
    }

    MerchantInfoDto mapMerchantInfoEntityToMerchantInfoDto(MerchantInfo merchantInfo);

    List<MerchantInfoResponse> mapMerchantInfoDTOListToResponseList(List<MerchantInfoDto> MerchantInfoDtos);
}
