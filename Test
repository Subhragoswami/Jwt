@Test
    void testMapEntityValidRequest() {
        UserEntityMappingRequest request = new UserEntityMappingRequest();
        request.setUserId(UUID.randomUUID());
        request.setEntityId("valid-entity-id");

        MerchantUserDto userDto = new MerchantUserDto();
        userDto.setId(request.getUserId());
        userDto.setStatus(UserStatus.ACTIVE);
        MerchantResponse<String> response = adminService.mapUserRole(request);

        assertNotNull(response);
        assertEquals(1, response.getStatus());
        assertEquals("user role updated", response.getData().getFirst());
    }

    @Test
    void testMapUserRole_Success() {
        MerchantUserDto merchantUserDto = MerchantUserDto.builder().email("email").build();

        MerchantUserDto userDto = new MerchantUserDto();
        userDto.setId(UUID.randomUUID());
        userDto.setUserName("test-user");
        userDto.setStatus(UserStatus.ACTIVE);

        doNothing().when(userEntityValidator).UserEntityRequestValidator(userEntityMappingRequest);

        when(adminDao.findByUserId(userEntityMappingRequest.getUserId())).thenReturn(merchantUserDto);
        doNothing().when(adminDao).UpdateUserRole(any(MerchantUserDto.class), eq(userEntityMappingRequest.getEntityId()));

        MerchantResponse<String> ans = adminService.mapUserRole(userEntityMappingRequest);
        assertEquals(ans.getStatus(),1);
        assertEquals(ans.getData().getFirst(), "user role updated");
    }



    @Test
    void testMapUserRole_InvalidRequest() {
        // Simulate validation failure
        doThrow(new RuntimeException("Validation failed")).when(userEntityValidator).UserEntityRequestValidator(userEntityMappingRequest);

        // Execute the method and verify exception
        try {
            adminService.mapUserRole(userEntityMappingRequest);
        } catch (RuntimeException e) {
            assertEquals("Validation failed", e.getMessage());
        }

        // Verify interactions
        verify(userEntityValidator, times(1)).UserEntityRequestValidator(userEntityMappingRequest);
        verifyNoInteractions(adminDao);
    }
