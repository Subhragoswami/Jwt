package com.epay.merchant.service;

import static com.epay.merchant.util.AppConstants.RESPONSE_SUCCESS;
import static org.junit.jupiter.api.Assertions.*;

import com.epay.merchant.entity.Captcha;
import com.epay.merchant.model.request.CaptchaRequest;
import com.epay.merchant.model.response.CaptchaResponse;
import com.epay.merchant.model.response.ResponseDto;
import com.epay.merchant.repository.CaptchaRepository;
import com.epay.merchant.util.enums.RequestType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.code.kaptcha.impl.DefaultKaptcha;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Base64;
import java.util.Optional;
import java.util.List;
import java.util.UUID;

import javax.imageio.ImageIO;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class CaptchaServiceTest {

    @Mock
    private DefaultKaptcha captchaProducer;

    @Mock
    private ObjectMapper objectMapper;

    @Mock
    private CaptchaRepository captchaRepository;

    @InjectMocks
    private CaptchaService captchaService;

    private CaptchaRequest captchaRequest;
    private Captcha captcha;
    private CaptchaResponse captchaResponse;
    private BufferedImage bufferedImage;
    private ByteArrayOutputStream outputStream;

    @BeforeEach
    void setUp() throws Exception {
        // Prepare test data
        captchaRequest = new CaptchaRequest();
        captchaRequest.setRequestId(UUID.randomUUID());
        captchaRequest.setRequestType(RequestType.LOGIN);

        captcha = new Captcha();
        captcha.setCaptchaImage("BASE64_IMAGE");
        captcha.setRequestId(UUID.randomUUID());
        captcha.setRequestType(RequestType.LOGIN);
        captcha.setExpiryTime(LocalDateTime.now().plusMinutes(5).atZone(ZoneId.systemDefault()).toInstant().toEpochMilli());

        captchaResponse = new CaptchaResponse();
        captchaResponse.setCaptchaImage("BASE64_IMAGE");
        //captchaResponse.setCaptchaText("12345");
        // captchaResponse.se(RequestType.USER_REGISTRATION);
        captchaResponse.setExpiryTime(LocalDateTime.now().plusMinutes(5));

        // Simulated image and base64
        bufferedImage = new BufferedImage(200, 50, BufferedImage.TYPE_INT_RGB);
        outputStream = new ByteArrayOutputStream();
        ImageIO.write(bufferedImage, "jpg", outputStream);
    }

    @Test
    void testCreateCaptcha()  {
        // Mock behavior
        when(captchaProducer.createText()).thenReturn("ABCD12");
        when(captchaProducer.createImage(anyString())).thenReturn(bufferedImage);
        when(captchaRepository.save(any(Captcha.class))).thenReturn(captcha);
        when(objectMapper.convertValue(any(Captcha.class), eq(CaptchaResponse.class))).thenReturn(captchaResponse);

        // Execute the method
        ResponseDto<CaptchaResponse> response = captchaService.createCaptcha(captchaRequest);

        // Verify response
        assertNotNull(response);
        assertEquals(RESPONSE_SUCCESS, response.getStatus());
        assertEquals(1, response.getData().size());
        assertEquals("BASE64_IMAGE", response.getData().get(0).getCaptchaImage());
        //assertEquals("12345", response.getData().get(0).getId());
        // assertEquals(RequestType., response.getData().get(0).getRequestType());

        // Verify interactions
        verify(captchaProducer, times(1)).createText();
        verify(captchaProducer, times(1)).createImage("ABCD12");
        verify(captchaRepository, times(1)).save(any(Captcha.class));
        verify(objectMapper, times(1)).convertValue(any(Captcha.class), eq(CaptchaResponse.class));
    }
}
