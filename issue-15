Description:

Parameter 0 of constructor in com.neo.client.project.service.EncryptDecryptService required a bean of type 'java.lang.String' that could not be found.


Action:

Consider defining a bean of type 'java.lang.String' in your configuration.

package com.neo.client.project.service;

import com.neo.client.project.model.request.EncryptDecryptRequest;
import com.neo.client.project.model.response.EncryptDecryptResponse;
import com.neo.client.project.model.response.ResponseDto;
import com.sbi.epay.encryptdecrypt.service.DecryptionService;
import com.sbi.epay.encryptdecrypt.service.EncryptionService;
import com.sbi.epay.encryptdecrypt.util.enums.EncryptionDecryptionAlgo;
import com.sbi.epay.encryptdecrypt.util.enums.GCMIvLength;
import com.sbi.epay.encryptdecrypt.util.enums.GCMTagLength;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Objects;



@Service
@RequiredArgsConstructor
public class EncryptDecryptService {
    
    @Value("${merchant.user.password.key}")
    private final String key;

    public ResponseDto<EncryptDecryptResponse> encryptOrDecryptData(EncryptDecryptRequest encryptDecryptRequest) {

        String result = "";
        if(Objects.equals(encryptDecryptRequest.getRequestType(), "ENCRYPT")){
            result = encryptValue(encryptDecryptRequest.getValue(), key);
        } else if (Objects.equals(encryptDecryptRequest.getRequestType(), "DECRYPT")) {
            result = decryptValue(encryptDecryptRequest.getValue(), key);
        }
        EncryptDecryptResponse encryptDecryptResponse = EncryptDecryptResponse.builder().result(result).build();

        return ResponseDto.<EncryptDecryptResponse>builder().data(List.of(encryptDecryptResponse)).build();
    }

    private static String encryptValue(String key, String value) {
       return EncryptionService.encryptValueByStringKey(key, value, EncryptionDecryptionAlgo.AES_GCM_NO_PADDING, GCMIvLength.MAXIMUM, GCMTagLength.STANDARD);
    }

    public static String decryptValue(String key, String value) {
        return DecryptionService.decryptValueByStringKey(key, value, EncryptionDecryptionAlgo.AES_GCM_NO_PADDING, GCMIvLength.MAXIMUM, GCMTagLength.STANDARD);
    }
}
