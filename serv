@Entity
@Table(name = "Merchant_Info")
public class MerchantInfo {
    @Id
    @Column(name = "MERCHANT_ID")
    private String merchantId;

    @Column(name = "MID")
    private String mid;

    @Column(name = "MERCHANT_NAME")
    private String merchantName;

    @Column(name = "VALIDITY_END_TIME")
    private Long validityEndTime;

    // Other fields, getters, and setters...
}


@Entity
@Table(name = "ALERT_MASTER")
public class AlertMaster {
    @Id
    @Column(name = "ID")
    private UUID id;

    @Column(name = "VALUE")
    private String value;

    // Other fields, getters, and setters...
}


@Entity
@Table(name = "ALERT_MANAGEMENT")
public class AlertManagement {
    @Id
    @Column(name = "ID")
    private UUID id;

    @Column(name = "ALERT_ID")
    private UUID alertId;

    @Column(name = "MID")
    private String mid;

    @Column(name = "VIEWED")
    private String viewed;

    @Column(name = "CREATED_AT")
    private Long createdAt;

    @Column(name = "CREATED_BY")
    private String createdBy;

    @Column(name = "UPDATED_BY")
    private String updatedBy;

    @Column(name = "UPDATED_AT")
    private Long updatedAt;

    // Getters and setters...
}





@Repository
public interface MerchantInfoRepository extends JpaRepository<MerchantInfo, String> {
    @Query("SELECT m FROM MerchantInfo m WHERE m.validityEndTime BETWEEN :startTime AND :endTime")
    List<MerchantInfo> findMerchantsExpiringInRange(@Param("startTime") Long startTime, @Param("endTime") Long endTime);
}

@Repository
public interface AlertMasterRepository extends JpaRepository<AlertMaster, UUID> {
    List<AlertMaster> findByValueIn(List<String> values);
}

@Repository
public interface AlertManagementRepository extends JpaRepository<AlertManagement, UUID> {
}




@Service
public class MerchantExpiryScheduler {

    @Autowired
    private MerchantInfoRepository merchantInfoRepository;

    @Autowired
    private AlertMasterRepository alertMasterRepository;

    @Autowired
    private AlertManagementRepository alertManagementRepository;

    @Scheduled(cron = "0 0 0 * * ?") // Runs daily at midnight
    public void checkMerchantExpiry() {
        long currentTime = System.currentTimeMillis();
        long oneDayMillis = 24 * 60 * 60 * 1000L;

        // Alert values (e.g., 1, 2, 3, 4, 5, 15, 30 days)
        List<String> alertValues = Arrays.asList("1", "2", "3", "4", "5", "15", "30");

        // Get merchants expiring in the next 30 days
        long maxEndTime = currentTime + (30 * oneDayMillis);
        List<MerchantInfo> expiringMerchants = merchantInfoRepository.findMerchantsExpiringInRange(currentTime, maxEndTime);

        for (MerchantInfo merchant : expiringMerchants) {
            long daysLeft = (merchant.getValidityEndTime() - currentTime) / oneDayMillis;

            if (alertValues.contains(String.valueOf(daysLeft))) {
                // Fetch alert details
                List<AlertMaster> alertMasters = alertMasterRepository.findByValueIn(alertValues);
                Optional<AlertMaster> alert = alertMasters.stream()
                        .filter(a -> a.getValue().equals(String.valueOf(daysLeft)))
                        .findFirst();

                alert.ifPresent(alertMaster -> {
                    // Update Alert Management
                    AlertManagement alertManagement = new AlertManagement();
                    alertManagement.setId(UUID.randomUUID());
                    alertManagement.setAlertId(alertMaster.getId());
                    alertManagement.setMid(merchant.getMid());
                    alertManagement.setViewed(daysLeft + " days left");
                    alertManagement.setCreatedAt(System.currentTimeMillis());
                    alertManagement.setCreatedBy("System");
                    alertManagement.setUpdatedBy("System");
                    alertManagement.setUpdatedAt(System.currentTimeMillis());

                    alertManagementRepository.save(alertManagement);
                });
            }
        }
    }
}


