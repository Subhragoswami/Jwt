  public void updateUserRole(MerchantUserDto userDto, String entityId) {
        List<MerchantUserRoleDto> merchantUserRoles = merchantUserRoleDao.getMerchantUserRoles();
        MerchantUserRoleDto merchantUserRole = merchantUserRoles.stream().filter(role -> role.getId().equals(userDto.getRole())).findFirst().get();
        if (MerchantUserRoles.SUPER_ADMIN.name().equals(merchantUserRole.getRole())) {
            log.info("User is a SUPER_ADMIN. Updating entityId for userId: {}", userDto.getId());
            merchantEntityUserRepository.updateEntityIdForUser(userDto.getId(), entityId);
        } else if (MerchantUserRoles.ADMIN.name().equals(merchantUserRole.getRole())) {
            log.info("User is an ADMIN. Upgrading role and saving entityId for userId: {}", userDto.getId());
            findOrSaveMerchantUser(userDto, entityId, merchantUserRoles);
        }
    }

    @Transactional
    public void findOrSaveMerchantUser(MerchantUserDto merchantUserDto, String entityId, List<MerchantUserRoleDto> merchantUserRoles) {
        MerchantUser merchantUser = mapper.mapMerchantUserDtoToEntity(merchantUserDto);
        MerchantUserRoleDto merchantUserRole = merchantUserRoles.stream().filter(role -> role.getRole().equals(MerchantUserRoles.SUPER_ADMIN.name())).findFirst().get();
        merchantUser.setRole(merchantUserRole.getId());
        merchantUser = merchantUserRepository.save(merchantUser);
        merchantEntityUserRepository.deleteByUserId(merchantUser.getId());
        MerchantEntityUser newEntityUser = MerchantEntityUser.builder().userId(merchantUser.getId()).entityId(entityId).mId(merchantEntityGroupRepository.findByEntityId(entityId).getMId()).build();
        merchantEntityUserRepository.save(newEntityUser);
        updateUserMenuPermission(merchantUser.getId(), merchantUserRole.getId());
    }

  public List<MerchantUserRoleDto> getMerchantUserRoles() {
        List<MerchantUserRole> merchantUserRoles = merchantUserRoleRepository.findAll();
        return mapper.mapMerchantUserRoleListEntityToListDto(merchantUserRoles);
    }

