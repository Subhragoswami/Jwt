public interface TokenManagementRepository extends JpaRepository<TokenManagement, UUID> {


    /**
     * Find a valid token for a specific user ID.
     *
     * @param userId UUID of the user.
     * @return Optional<TokenManagement> containing the token details if found.
     */
    @Query("FROM TokenManagement tm WHERE tm.userId = :userId AND tm.isValid = true")
    Optional<TokenManagement> findTokenByUserIdAndIsValidTrue(@Param("userId") UUID userId);

    /**
     * Check if a token exists and is valid.
     *
     * @param token String token to check.
     * @return boolean indicating if the token exists and is valid.
     */
    boolean existsByTokenAndIsValidTrue(String token);

}

I need to implement those two methods here for gemfire

package com.epay.merchant.repository.cache;

import com.epay.merchant.entity.cache.TokenManagementCache;
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface TokenManagementCacheRepository  extends CrudRepository<TokenManagementCache, String> {


}

@Getter
@Setter
@Region("Token_Management")
@Builder
public class TokenManagementCache implements Serializable {
    @Id
    private String id;
    private String userId;
    private String token;
    private Long tokenExpiryTime;
    private boolean isValid;
    @Enumerated(EnumType.STRING)
    private TokenStatus tokenStatus;
    private String remarks;
    private Long createdAt;
}

@EqualsAndHashCode(callSuper = true)
@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "TOKEN_MANAGEMENT")
public class TokenManagement extends AuditEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;
    @Version
    private int version;
    private UUID userId;
    private String token;
    private Long tokenExpiryTime;
    private boolean isValid;
    @Enumerated(EnumType.STRING)
    private TokenStatus tokenStatus;
    private String remarks;

}



import com.epay.merchant.entity.cache.TokenManagementCache;
import org.springframework.data.gemfire.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface TokenManagementCacheRepository extends CrudRepository<TokenManagementCache, String> {

    /**
     * Find a valid token for a specific user ID.
     *
     * @param userId User ID to search for.
     * @return Optional<TokenManagementCache> containing the token details if found.
     */
    @Query("SELECT * FROM /Token_Management WHERE userId = $1 AND isValid = true")
    Optional<TokenManagementCache> findTokenByUserIdAndIsValidTrue(String userId);

    /**
     * Check if a token exists and is valid.
     *
     * @param token Token to check.
     * @return boolean indicating if the token exists and is valid.
     */
    @Query("SELECT count(*) > 0 FROM /Token_Management WHERE token = $1 AND isValid = true")
    boolean existsByTokenAndIsValidTrue(String token);
}