 public MerchantResponse<MerchantBankAccountDetailsResponse> getBankAccountDetails(String mId, Pageable pageable){
        List<MerchantBankAccountDetailsResponse> merchantBankAccountDetailsResponseList = merchantBankAccountCreationDao.getBankDetailsByMid(mId, pageable);
        return MerchantResponse.<MerchantBankAccountDetailsResponse>builder().data(merchantBankAccountDetailsResponseList).status(RESPONSE_SUCCESS).count(merchantBankAccountDetailsResponseList.stream().count()).build();
    }

 @GetMapping("/{mId}")
    @Operation(summary = "", description = "")
    @PreAuthorize("hasAnyRole('ADMIN','SUPER_ADMIN')")
    public MerchantResponse<MerchantBankAccountDetailsResponse> getBankAccountDetails(@PathVariable String mId, @PageableDefault Pageable pageable){
        return merchantBankAccountCreationService.getBankAccountDetails(mId, pageable);
    }



/**
 * Fetch Bank Account Details for a Merchant
 *
 * @param mId String - Merchant ID for which bank account details are requested
 * @param pageable Pageable - Pagination details for the request
 * @return MerchantResponse<MerchantBankAccountDetailsResponse> - Response containing bank account details
 */
@GetMapping("/{mId}")
@Operation(summary = "Fetch Bank Account Details", description = "Fetches bank account details for a merchant based on their Merchant ID. Supports pagination.")
@PreAuthorize("hasAnyRole('ADMIN','SUPER_ADMIN')")
public MerchantResponse<MerchantBankAccountDetailsResponse> getBankAccountDetails(@PathVariable String mId, @PageableDefault Pageable pageable) {
    log.info("API call received: Fetch bank account details. Merchant ID: {}, Pageable: {}", mId, pageable);

    // Step 1: Call the service layer to get bank account details
    log.info("Step 1: Calling service layer to fetch bank account details for Merchant ID: {}", mId);
    MerchantResponse<MerchantBankAccountDetailsResponse> response = merchantBankAccountCreationService.getBankAccountDetails(mId, pageable);

    // Step 2: Return the response back to the caller
    log.info("Step 2: Returning the response to the caller. Response: {}", response);
    return response;
}




/**
 * Get Merchant Bank Account Details
 *
 * @param mId String - Merchant ID to fetch bank account details
 * @param pageable Pageable - Pagination details for fetching records
 * @return MerchantResponse<MerchantBankAccountDetailsResponse> - Response containing a list of bank account details
 */
public MerchantResponse<MerchantBankAccountDetailsResponse> getBankAccountDetails(String mId, Pageable pageable) {
    log.info("Step 1: Starting service method to fetch bank account details for Merchant ID: {}, Pageable: {}", mId, pageable);

    // Step 2: Fetch the list of bank account details from DAO
    List<MerchantBankAccountDetailsResponse> merchantBankAccountDetailsResponseList =
            merchantBankAccountCreationDao.getBankDetailsByMid(mId, pageable);
    log.info("Step 2: Fetched bank account details from DAO. Total records fetched: {}", merchantBankAccountDetailsResponseList.size());

    // Step 3: Build the response object
    MerchantResponse<MerchantBankAccountDetailsResponse> response = MerchantResponse.<MerchantBankAccountDetailsResponse>builder()
            .data(merchantBankAccountDetailsResponseList)
            .status(RESPONSE_SUCCESS)
            .count((long) merchantBankAccountDetailsResponseList.size())
            .build();
    log.info("Step 3: Response built successfully. Response: {}", response);

    // Step 4: Return the response back to the caller
    log.info("Step 4: Returning the response to the caller.");
    return response;
}