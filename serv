    /**
     * 
     * @param id UUID
     * @param rfsId UUID
     * @return String
     */
    public ReportingResponse<String> generateMerchantPayoutReport(UUID id, List<UUID> rfsId) {
        List<MerchantPayout> list = merchantPayoutDao.getMerchantPayoutData(rfsId);
        List<List<Object>> fileData = list.stream().map(this::convertToListOfObject).toList();
        buildReport(ReportFormat.CSV, getMerchantPayoutHeaders(), fileData, Report.MERCHANT_WISE_PAYOUT_MIS, id);
        return ReportingResponse.<String>builder().status(ReportingConstant.RESPONSE_SUCCESS).data(List.of("REPORT_GENERATED_SUCCESSFULLY")).build();

    }

    /**
     *
     * @param id UUID
     * @param rfsId UUID
     * @return String
     */
    public ReportingResponse<String> generateTransactionRefund(UUID id, List<UUID> rfsId) {
        List<TransactionRefund> list = merchantPayoutDao.getTransactionRefundData(rfsId);
        List<List<Object>> fileData = list.stream().map(this::convertToListOfObject).toList();
        buildReport(ReportFormat.CSV, getTransactionRefundHeaders(), fileData, Report.TRANSACTION_WISE_REFUND_MIS, id);
        return ReportingResponse.<String>builder().status(ReportingConstant.RESPONSE_SUCCESS).data(List.of("REPORT_GENERATED_SUCCESSFULLY")).build();
    }

    protected void buildReport(ReportFormat reportFormat, List<String> header, List<List<Object>> fileData, Report report, UUID id) {
        FileModel fileModel = fileGeneratorService.buildFileModel(reportFormat, header, fileData, Map.of("headers", header, "rows", fileData));
        ReportFile reportFile = fileGeneratorService.generateFile(reportFormat, report, fileModel);
        String s3FileName = fileService.uploadFile(reportFile.getName(), reportFile.getContent());
        ReportManagementDto reportManagementDto = ReportManagementDto.builder().reportId(id).mId("0").durationFromDate(0L).durationToDate(0L).format(ReportFormat.CSV).status(ReportStatus.GENERATED).remarks("Report request from operation service").filePath(s3FileName).build();
        reportManagementDao.saveReport(reportManagementDto);
        log.info(s3FileName);
    }

public class MerchantPayoutDao {

    private final MerchantPayoutRepository merchantPayoutRepository;
    private final TransactionRefundDao transactionRefundDao;

    public List<MerchantPayout> getMerchantPayoutData(List<UUID> rfsId) {
        return merchantPayoutRepository.getMerchantPayout(rfsId);
    }

    public List<TransactionRefund> getTransactionRefundData(List<UUID> rfsId) {
        return transactionRefundDao.getTransactionRefundData(rfsId);
    }

please add method defination and logger.
