  public MerchantResponse<Object> merchantLogin(MerchantLoginRequest merchantLoginRequest) {
        log.info("Started merchantLogin for userName: {}", merchantLoginRequest.getUserName());
        try {
            log.info("validating Merchant login request for userName : {}", merchantLoginRequest.getUserName());
            merchantLoginValidator.validateMerchantLoginRequest(merchantLoginRequest);
            loginDao.saveLoginAudit(merchantLoginRequest.getUserName(), RequestType.LOGIN, true, MessageFormat.format(SUCCESS_MESSAGE, "Logged In User Found"));
            loginDao.updateCaptchaIsVerified(merchantLoginRequest.getRequestId());
            merchantLoginValidator.validatedMerchantUser(merchantLoginRequest.getUserName());
            return MerchantResponse.builder().status(RESPONSE_SUCCESS).data(List.of(MessageFormat.format(SUCCESS_MESSAGE, "Logged In User Found"))).build();
        } catch (ValidationException e) {
            e.getErrorMessages().stream().filter(errorCode -> ErrorConstants.MANDATORY_ERROR_CODE.equals(errorCode.getErrorCode())).forEach(errorCode -> {
                throw e;
            });
            e.getErrorMessages().stream().filter(errorCode -> ErrorConstants.NOT_FOUND_ERROR_CODE.equals(errorCode.getErrorCode())).forEach(errorCode -> {
                throw e;
            });
            log.error("Login Validation Failed for userName {} with error {}", merchantLoginRequest.getUserName(), e.getErrorMessages().toString());
            return handleLoginFailure(merchantLoginRequest.getUserName(), e.getErrorMessages().stream().map(ErrorDto::toString).collect(Collectors.joining(", ")), e.getErrorMessages());
        } catch (MerchantException e) {
            log.error("MerchantException : Login Failed for userName {} ", merchantLoginRequest.getUserName());
            if(ErrorConstants.INVALID_ERROR_CODE.equals(e.getErrorCode())){
                throw e;
            }
            return handleLoginFailure(merchantLoginRequest.getUserName(), e.getErrorMessage(), List.of(ErrorDto.builder().errorCode(e.getErrorCode()).errorMessage(e.getErrorMessage()).build()));
        } catch (Exception e) {
            log.error("GenericException : Login Failed for userName {} ", merchantLoginRequest.getUserName(), e.getMessage());
            return handleLoginFailure(merchantLoginRequest.getUserName(), e.getLocalizedMessage(), List.of(ErrorDto.builder().errorCode(GENERIC_ERROR_CODE).errorMessage(e.getMessage()).build()));
        }
    }
