public ReportingResponse<String> generateMerchantGstInvoice(String mId, List<String> reportMonths, HttpServletResponse response) {
        try {
            log.info("Fetching GST Invoice Data for mId: {} and reportMonths: {}", mId, reportMonths);
            invoiceValidator.validateRequestMonths(reportMonths);
            //mIdValidator.validatedActiveMId(mId);
            List<Map<String, Object>> gstInvoiceData = invoiceDao.getGstInvoiceData(mId, reportMonths);
            if (CollectionUtils.isNotEmpty(gstInvoiceData)) {
                //List<FileModel> fileModels = getFileModels(gstInvoiceData);
                log.info("Fetched {} records for GST Invoice", gstInvoiceData.size());
                List<String> gstHeaders = null;
                List<List<Object>> fileData = new ArrayList<>();
                for (Map<String, Object> csvData : gstInvoiceData) {
                    Map<String, Object> dataMap = (Map<String, Object>) csvData.get("map");
                    gstHeaders = (List<String>) dataMap.get("headers");
                    fileData.addAll((List<List<Object>>) dataMap.get("rows"));
                }
                buildReport(mId, reportMonths, gstHeaders, fileData, response);
            } else {
                log.warn("No GST Invoice Data found for MID: {} and reportMonths: {}", mId, reportMonths);
                return ReportingResponse.<String>builder().data(List.of("No Data Found")).status(ReportingConstant.RESPONSE_SUCCESS).build();
            }
        }catch (ValidationException e) {
            log.error("Validation error while generating GST Invoice for MID: {} and reportMonths: {}. Error: {}", mId, reportMonths, e.getMessage());
            throw e;
        }
        catch (Exception e) {
            log.error("Unexpected error while generating GST Invoice for MID: {} and reportMonths: {}. Error: {}", mId, reportMonths, e.getMessage());
            throw new ReportingException(ErrorConstants.GENERATION_ERROR_CODE, "Error generating GST invoice report.");
        }
        return ReportingResponse.<String>builder().data(List.of("Success")).status(ReportingConstant.RESPONSE_SUCCESS).build();
    }

public List<Map<String, Object>> getGstInvoiceData(String mId, List<String> reportMonths) {
        log.info("Fetching GST Invoice Data for MerchantId: {} and reportMonths {}", mId, reportMonths);
        List<GstReport> merchantGstData = invoiceRepository.getMerchantGstInvoice(mId, reportMonths);
        Map<String, List<GstReport>> gstDataMonthBy = convertInvoiceGstMonthWise(merchantGstData);
        log.info("Returning processed GST Invoice data for {} months. Fetched {} records", gstDataMonthBy.size(), merchantGstData.size());
        return gstDataMonthBy.entrySet().stream().map(entry -> createCSVTemplate(Report.GST_INVOICE, entry.getKey(), entry.getValue())).toList();
    }

public static Map<String, List<GstReport>> convertInvoiceGstMonthWise(List<GstReport> gstReportData) {
        log.debug("Converting merchant GST data into month-wise groups.");
        Map<String, List<GstReport>> gstDataMonthBy = new HashMap<>();
        gstReportData.forEach(merchantFeesReport -> {
            if (gstDataMonthBy.containsKey(merchantFeesReport.getTransactionDate())) {
                gstDataMonthBy.get(merchantFeesReport.getTransactionDate()).add(merchantFeesReport);
            } else {
                List<GstReport> merchantFeesReports = new ArrayList<>();
                merchantFeesReports.add(merchantFeesReport);
                gstDataMonthBy.put(merchantFeesReport.getTransactionDate(), merchantFeesReports);
            }
        });
        log.debug("Conversion completed. Grouped by {} months.", gstDataMonthBy.size());
        return gstDataMonthBy;
    }

    public static Map<String, Object> createCSVTemplate(Report report, String reportDate, List<GstReport> gstReports) {
        log.info("Creating CSV template input for report: {} on date: {}", report.getName(), reportDate);
        List<String> headers = Arrays.asList("Transaction Number", "GST", "GST Charged", "GST Of", "Narration", "Date");
        List<List<Object>> rows = new ArrayList<>();
        for (GstReport gstReport : gstReports) {
            List<Object> row = Arrays.asList(
                    gstReport.getTransactionNumber(),
                    ReportingConstant.GST_PERCENTAGE,
                    gstReport.getGstCharged(),
                    ReportingConstant.GST_OF,
                    ReportingConstant.NARRATION,
                    gstReport.getTransactionDate());
            rows.add(row);
        }

        Map<String, Object> dataMap = new HashMap<>();
        dataMap.put("headers", headers);
        dataMap.put("rows", rows);
        Map<String, Object> input = new HashMap<>();
        input.put("map", dataMap);
        input.put("report", reportDate);
        return input;
    }

private void buildReport(String mId, List<String> reportMonths, List<String> header, List<List<Object>> fileData, HttpServletResponse response) {
        log.info("Building GST Invoice Report for MID: {} and Report month: {}", mId, reportMonths);
        FileModel fileModel = fileGeneratorService.buildFileModel(
                ReportFormat.CSV, header, fileData, Map.of("headers", header, "rows", fileData)
        );
        fileModel.setReportMonth(reportMonths.getFirst());
        log.info("File model created, generating file for GST Invoice.");

        if (fileData.size() > 1) {
            fileGeneratorService.generateZipFile(response, ReportFormat.CSV, Report.GST_INVOICE, mId, List.of(fileModel));
        } else {
            fileGeneratorService.downloadFile(response, ReportFormat.CSV, Report.GST_INVOICE, mId, fileModel);
        }
    }

public static final String JDBC_GST_INVOICE = """
                    SELECT TRANSACTION_NUMBER AS transactionNumber,
                    TO_CHAR(transaction_date, 'DD-MM-YY') as transactionDate,
                    CASE
                        WHEN MERCHANT_GST_CHARGED > 0 THEN MERCHANT_GST_CHARGED
                        ELSE CUSTOMER_GST_CHARGED
                    END AS gstCharged
                    FROM PAYAGGREPORT.view_gst_invoice
                    WHERE MID = :mId
                    AND TO_CHAR(TO_DATE(transaction_date, 'DD-MM-YY'), 'Mon-YYYY') IN (:reportMonth)
                    ORDER BY transaction_date DESC
            """;

  public void generateZipFile(HttpServletResponse response, ReportFormat reportFormat, Report report, String mId, List<FileModel> fileModels) {
        log.info("Started zipFileGenerator for reportFormat: {}, report: {}, mId: {}, fileModels: {}", reportFormat, report.getName(),mId,fileModels);
        zipFileGenerator.generateZipFile(response, reportFormat, report, mId, fileModels);
    }

public void generateZipFile(HttpServletResponse response, ReportFormat reportFormat, Report report, String mId, List<FileModel> fileModels) {
        log.info("Starting ZIP file generation for report: {} and merchant ID: {}", report.getName(), mId);
        try {
            ByteArrayOutputStream byteArrayOutputStream = generateZipFile(reportFormat, report, mId, fileModels);
            response.setContentType("application/zip");
            response.setHeader(HttpHeaders.CONTENT_DISPOSITION, StringEscapeUtils.escapeJava("attachment;filename=" + mId + "_" + report.getName() + ".zip"));
            response.setContentLength(byteArrayOutputStream.size());
            response.getOutputStream().write(byteArrayOutputStream.toByteArray());
            response.getOutputStream().flush();
            log.info("ZIP file successfully generated and sent to the response.");
        } catch (Exception e) {
            log.error("Error occurred during zipFileGenerator : {}", e.getMessage());
            throw new ReportingException(ErrorConstants.FILE_GENERATION_ERROR_CODE, MessageFormat.format(ErrorConstants.FILE_GENERATION_ERROR_MESSAGE, "zip", e.getMessage()));
        }

   private ByteArrayOutputStream generateZipFile(ReportFormat reportFormat, Report report, String mId, List<FileModel> fileModels) throws IOException {
        log.debug("Generating ZIP file for report: {} with format: {}", report.getName(), reportFormat.name());
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        for (FileModel fileModel : fileModels) {
            ReportFile reportFile = fileGenerator.generateFile(reportFormat, report, mId, fileModel);
            try (ZipOutputStream zos = new ZipOutputStream(byteArrayOutputStream)) {
                ZipEntry zipEntry = new ZipEntry(getZipFileName(reportFormat, report, fileModel));
                zos.putNextEntry(zipEntry);
                zos.write(reportFile.getContent());
                zos.closeEntry();
            }
        }
        log.debug("ZIP file generation completed for report: {}", report.getName());
        return byteArrayOutputStream;
    }
 public ReportFile generateFile(ReportFormat reportFormat, Report report, String mId, FileModel fileModel) {
        logger.info("Generating file for report format: {}, report: {}, mId: {}", reportFormat, report.getName(), mId);
        switch (reportFormat) {
            case CSV -> {
                CSVFileModel csvFileModel = (CSVFileModel) fileModel;
                return CSVGenerator.csvFileGenerator(report.getName(), mId, csvFileModel.getHeaders(), csvFileModel.getFileData());
            }

  protected static ReportFile csvFileGenerator(String reportName, String mId, List<String> headerName, List<List<Object>> objects) {
        log.info("Started csv file generator for reportName : {}, mId {}, headerName: {},  objects.size: {}", reportName, mId, headerName, CollectionUtils.size(objects));
        String fileName = getFileName(reportName, mId);
        String csvContent = generateCSV(headerName, objects);
        return ReportFile.builder().name(fileName).content(csvContent.getBytes(StandardCharsets.UTF_8)).build();
    }

   private static String generateCSV(List<String> headers, List<List<Object>> objects) {
        StringBuilder csvContent = new StringBuilder();
        csvContent.append(String.join(",", headers)).append("\n");
        for (List<Object> rowData : objects) {
            String row = rowData.stream()
                    .map(data -> ObjectUtils.isNotEmpty(data) ? data.toString() : StringUtils.EMPTY)
                    .collect(Collectors.joining(","));
            csvContent.append(row).append("\n");
        }
        return csvContent.toString();
    }





here reportMonths will come in this format   ["Feb-2025","Jan-2025"] now if multiple months are coming then I need to create csv files based on that maonth and share it in one zip file
