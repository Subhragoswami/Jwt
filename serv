 public ReportingResponse<TransactionDailyFailureReport> getTransactionDailyReport(String mid, String startDate, String endDate) {
        List<TransactionDailyFailureReport> summaryList = transactionDailyRepository.getSuccessFailureSummary(mid, startDate, endDate);
        Map<String, List<TransactionFailure>> failureMap = transactionDailyRepository.getFailureDetails(mid, startDate, endDate);
        for (TransactionDailyFailureReport report : summaryList) {
            BigDecimal totalFailedAmount = report.getTotalFailureAmount();
            List<TransactionFailure> failuresForDate = failureMap.getOrDefault(report.getTransactionDate(), new ArrayList<>());
            for (TransactionFailure failure : failuresForDate) {
                BigDecimal failurePercentage = totalFailedAmount.compareTo(BigDecimal.ZERO) > 0
                        ? failure.getFailureAmount().divide(totalFailedAmount, 2, RoundingMode.HALF_UP).multiply(BigDecimal.valueOf(100))
                        : BigDecimal.ZERO;
                failure.setFailurePercentage(failurePercentage);
            }

            report.setTransactionFailures(failuresForDate);
        }

        return ReportingResponse.<TransactionDailyFailureReport>builder().data(summaryList).build();
    }
