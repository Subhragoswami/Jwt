include:
  - template: Jobs/SAST.latest.gitlab-ci.yml 

stages:
#- lint
- build
- test
- sast
- fortifyscan
- dockerbuild
#- notify
- commit_update

variables:
  GIT_STRATEGY: clone
  GITLAB_ADVANCED_SAST_ENABLED: 'true'
  SECURE_ANALYZERS_PREFIX: "$CI_TEMPLATE_REGISTRY_HOST/ubi9/security-products"
  SAST_IMAGE_SUFFIX: ""
  CI_TEMPLATE_REGISTRY_HOST: "registry.dev.sbiepay.sbi:8443"
  SAST_EXCLUDED_ANALYSERS: ""
  DEFAULT_SAST_EXCLUDED_PATHS: "spec, test, tests, tmp"
  SAST_EXCLUDED_PATHS: "$DEFAULT_SAST_EXCLUDED_PATHS"
  FORTIFY_IMAGE: "registry.dev.sbiepay.sbi:8443/hpfortify/fortify_sca_23.1.0:v7"
  FORTIFY_PROJECT: "merchant"
  PROJECT_NAME: "merchantci"
  FORTIFY_SCAN_OUTPUT: "merchantci.fpr"
  SOURCE_ANALYZER: "/opt/Fortify/Fortify_SCA_23.1.0/bin/sourceanalyzer"
  BIRTReportGenerator: "/opt/Fortify/Fortify_Apps_and_Tools_23.1.0/bin/BIRTReportGenerator"
  #GRADLE_HOME: "/opt/gradle"
  #GRADLE_BUILD_FILE: "build.gradle"  
  FORTIFY_PROJECT_DIR: "./"  
# podman_user: root
# podman_password: root@123
# image_version: v2
  REPO_URL: "https://gitlab-ci-token:$GIT_PAT@gitlab.epay.sbi/epay/devops/deployment.git"
  CD_BRANCH: "feature/testcd"
  BRANCH: "${CI_COMMIT_REF_NAME}"
  SERVICE_PATH: "dev/charts/Epay_Merchant_Service/"
  SERVICE_NAME: "registry.dev.sbiepay.sbi:8443/library/epay_merchant-original"
  GIT_REPO_URL: "https://gitlab.epay.sbi/api/v4/projects/48/packages/maven"
  CI_USERNAME: "gitlab-ci-token"
  CI_JOB_TOKEN: "${CI_JOB_TOKEN}"

.standard-rules: # Make a hidden job to hold the common rules
  rules:
    # Run if the merge request created for target branch('develop', 'release' or 'main')
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(develop|release|main)$/'
    # Run if anything commited to the commit branch(('develop', 'release' or 'main')
    - if: '$CI_COMMIT_BRANCH =~ /^(develop|release|main)$/'   


build:
  extends:
    - .standard-rules  # Reuse the configuration in `.standard-rules` here
  stage: build   
  image: 
   name:  $CI_TEMPLATE_REGISTRY_HOST/ubi9/gradle-8.9-jdk-21:v6
   pull_policy: always
  script:
    - pwd
    - gradle build -x test
    - cd build/libs/
    - ls -ltrh | grep -v "plain" 
  artifacts:
    paths:
      - build/libs/
    when: on_success 
    expire_in: 1 week
  


test:
  extends:
    - .standard-rules  # Reuse the configuration in `.standard-rules` here
  stage: test
  image: 
    name:  $CI_TEMPLATE_REGISTRY_HOST/ubi9/gradle-8.9-jdk-21:v6
    pull_policy: always
  script:
    - pwd
    - ls -lrth | wc -l
    - gradle test
 

sast:
  extends:
    - .standard-rules  # Reuse the configuration in `.standard-rules` here
  stage: sast
  before_script:
    - echo "hello from before sast"
    - echo "this is in the file" > test.txt
  artifacts:
    reports:
      sast: gl-sast-report.json
    paths:
      - gl-sast-report.json
      - test.txt
  variables:
    SEARCH_MAX_DEPTH: 4  

.sast-analyzer:
  extends: sast
  script:
    - echo "Starting SAST Analyzer"
    - /analyzer run 
  tags:
    - privileged

gitlab-advanced-sast:
  extends: .sast-analyzer
  image:
    name: "$SAST_ANALYZER_IMAGE"
  variables:
    SEARCH_MAX_DEPTH: 20
    SAST_ANALYZER_IMAGE_TAG: '1'
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/gitlab-advanced-sast:$SAST_ANALYZER_IMAGE_TAG$SAST_IMAGE_SUFFIX"
  rules:
    - if: $SAST_DISABLED == 'true' || $SAST_DISABLED == '1'
      when: never
    - if: $SAST_EXCLUDED_ANALYZERS =~ /gitlab-advanced-sast/
      when: never
    - if: $GITLAB_ADVANCED_SAST_ENABLED != 'true' && $GITLAB_ADVANCED_SAST_ENABLED != '1'
      when: never
   # - if: $CI_MERGE_REQUEST_ID && $GITLAB_FEATURES =~ /\bsast_advanced\b/  
    - if: $CI_COMMIT_BRANCH && $GITLAB_FEATURES =~ /\bsast_advanced\b/
      exists:
        - '**/*.py'
        - '**/*.go'
        - '**/*.java'
        - '**/*.jsp'
        - '**/*.js'
        - '**/*.jsx'
        - '**/*.ts'
        - '**/*.tsx'
        - '**/*.cjs'
        - '**/*.mjs'
        - '**/*.cs'
        - '**/*.rb'
  # prevent the stage from running if the pipeline  source is a push
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never
  # Run if the merge request target branch is 'develop', 'release' or 'main'    
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(develop|release)$/'
      when: on_success
  # default rule: preven the stage from running unless conditions are met
    - when: never    
  
send-reports:
  extends:
    - .standard-rules  # Reuse the configuration in `.standard-rules` here
  stage: sast
  image: 
    name: "$SAST_ANALYZER_IMAGE"
    pull_policy: always
  dependencies:
    - sast
  before_script:
    - echo "This is the send-reports before_script"
  script:
    - echo "in send-reports job"
    - ls
  artifacts:
    reports:
      sast: gl-sast-report.json
   

fortifyscan:
  extends:
    - .standard-rules  # Reuse the configuration in `.standard-rules` here
  stage: fortifyscan
  image: $FORTIFY_IMAGE
  script:
    - ls
    - $SOURCE_ANALYZER -b $FORTIFY_PROJECT -clean
    - $SOURCE_ANALYZER -b $FORTIFY_PROJECT "$FORTIFY_PROJECT_DIR/**/*.java" -exclude "./src/test/**/*"
    #- $SOURCE_ANALYZER -b $FORTIFY_PROJECT -exclude="./src/test/**" "$FORTIFY_PROJECT_DIR/**/*.xml"
#    - $SOURCE_ANALYZER -b $FORTIFY_PROJECT -scan -f "$FORTIFY_PROJECT_DIR/$FORTIFY_SCAN_OUTPUT"
    - $SOURCE_ANALYZER -b $FORTIFY_PROJECT -scan -format fpr -f "$FORTIFY_PROJECT_DIR/$FORTIFY_SCAN_OUTPUT"
    - ls -l "$FORTIFY_PROJECT_DIR/$FORTIFY_SCAN_OUTPUT" 
    - $BIRTReportGenerator \
      -template "Developer Workbook" \
      -source "${FORTIFY_PROJECT_DIR}/${FORTIFY_SCAN_OUTPUT}" \
      -format PDF \
      -output "${FORTIFY_PROJECT_DIR}/${PROJECT_NAME}_report.pdf" \
      -showSuppressed \
      -showHidden \
      -Xmx4G
    - echo "PDF generation complete."
    - pwd
    - echo ${FORTIFY_PROJECT_DIR}
    - echo ${PROJECT_NAME}
    - ls -lrth "${FORTIFY_PROJECT_DIR}" 
  artifacts:
    paths:
     - "./merchantci.fpr"
     - "./merchantci_report.pdf"
#   - "$FORTIFY_PROJECT_DIR/$FORTIFY_SCAN_OUTPUT"
    expire_in: 1 week  


dockerbuild:
  stage: dockerbuild
  dependencies:
    - build
  script:
    - ls -ltrh build/libs/
    - cp build/libs/epay_merchant_service-0.0.1-SNAPSHOT.jar .
    - ls -ltrh
# Get the target branch name (for merge requests) or current branch name (for non-merge requests)
    - TARGET_BRANCH="${CI_MERGE_REQUEST_TARGET_BRANCH_NAME:-$CI_COMMIT_REF_NAME}"
    - TIMESTAMP=$(date +"%Y%m%d%H%M%S")
    - TAG="${TARGET_BRANCH}-${TIMESTAMP}"
    - echo "Generated Tag.. $TAG"
    - echo $TAG > tag.txt
    - podman login -u root -p root@123 $CI_TEMPLATE_REGISTRY_HOST --tls-verify=false
    - podman build -t $SERVICE_NAME:$TAG -f Dockerfile --tls-verify=false
    - podman push $SERVICE_NAME:$TAG --tls-verify=false
  artifacts:
    paths:
      - tag.txt
    when: on_success 
    expire_in: 1 week
  rules:
 #   - if: '$CI_PIPELINE_SOURCE == "push"'
 #     when: never
 #   - if: '$CI_COMMIT_BRANCH =~ /^(develop|release)$/ && $CI_MERGE_REQUEST_APPROVED == "true"'
 #     when: on_success
 #   - when: never 
 #  - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(develop|release)$/ && $CI_MERGE_REQUEST_APPROVED == "true"'
 #    when: on_success
 #  - when: never    
    # Run if anything commited to the commit branch(('develop', 'release' or 'main')
    - if: '$CI_COMMIT_BRANCH =~ /^(develop|release|main)$/'   

commit_update:
  stage: commit_update
  dependencies:
    - dockerbuild
  image: $CI_TEMPLATE_REGISTRY_HOST/library/rhelgit:latest
  before_script:
    - git config --global http.sslVerify false

  script:
    - TAG=$(cat tag.txt)
    - git clone --branch ${CD_BRANCH} ${REPO_URL}
    - cd deployment
    - git checkout ${CD_BRANCH}
    - ls -ltrh $SERVICE_PATH
    - cat $SERVICE_PATH/values.yaml
    - echo "Tag is $TAG"
    - sed -i "s/\(tag:\).*/\1 \"${TAG}\"/" $SERVICE_PATH/values.yaml
    - git config --global user.name "ci"
    - git config --global user.email "ci.cedge@sbi.co.in"    
    - git add $SERVICE_PATH/values.yaml
    - git commit -m "Update image tag to $TAG"
    - git push origin ${CD_BRANCH}
    - cat $SERVICE_PATH/values.yaml
  rules:
  # prevent the stage from running if the pipeline source is a push
  #  - if: '$CI_PIPELINE_SOURCE == "push"'
  #    when: never
  # Run if the commit branch is 'release' and merge request is approved.
  #  - if: '$CI_COMMIT_BRANCH =~ /^(develop|release)$/ && $CI_MERGE_REQUEST_APPROVED == "true"'
  #    when: on_success
  # default rule: preven the stage from running unless conditions are met
  #  - when: never 
   # Run if anything commited to the commit branch(('develop', 'release' or 'main')
    - if: '$CI_COMMIT_BRANCH =~ /^(develop|release|main)$/'   

