 public List<Map<String, Object>> getGstInvoiceData(String mId, List<String> reportMonths) {
        log.info("Fetching GST Invoice Data for MerchantId: {} and reportMonths {}", mId, reportMonths);
        List<GstReport> merchantGstData = invoiceRepository.getMerchantGstInvoice(mId, reportMonths);
        Map<String, List<GstReport>> gstDataMonthBy = convertInvoiceGstMonthWise(merchantGstData);
        log.info("Returning processed GST Invoice data for {} months. Fetched {} records", gstDataMonthBy.size(), merchantGstData.size());
        return gstDataMonthBy.entrySet().stream().map(entry -> createCSVTemplate(Report.GST_INVOICE, entry.getKey(), entry.getValue())).toList();
    }

 public ReportingResponse<String> generateMerchantGstInvoice(String mId, List<String> reportMonths, HttpServletResponse response) {
        try {
            log.info("Fetching GST Invoice Data for mId: {} and reportMonths: {}", mId, reportMonths);
            mIdValidator.validateActiveMId(mId);
            invoiceValidator.validateRequestMonths(reportMonths);
            List<Map<String, Object>> gstInvoiceData = invoiceDao.getGstInvoiceData(mId, reportMonths);
            if (CollectionUtils.isNotEmpty(gstInvoiceData)) {
                log.info("Fetched {} records for GST Invoice", gstInvoiceData.size());
                buildReport(mId, reportMonths, gstInvoiceData, response);
            } else {
                log.info("No GST Invoice Data found for MID: {} and reportMonths: {}", mId, reportMonths);
                return ReportingResponse.<String>builder().data(List.of("No Data Found")).status(ReportingConstant.RESPONSE_SUCCESS).build();
            }
        } catch (ValidationException e) {
            log.error("Validation error while generating GST Invoice for MID: {} and reportMonths: {}. Error: {}", mId, reportMonths, e.getMessage());
            throw e;
        } catch (Exception e) {
            log.error("Unexpected error while generating GST Invoice for MID: {} and reportMonths: {}. Error: {}", mId, reportMonths, e.getMessage());
            throw new ReportingException(ErrorConstants.GENERATION_ERROR_CODE, "Error generating GST invoice report.");
        }
        return ReportingResponse.<String>builder().data(List.of("Success")).status(ReportingConstant.RESPONSE_SUCCESS).build();
    }

private void buildReport(String mId, List<String> reportMonths, List<Map<String, Object>> gstInvoiceData, HttpServletResponse response) {
        log.info("Building GST Invoice Report for MID: {} and Report months: {}", mId, reportMonths);
        List<FileModel> fileModels = new ArrayList<>();
        for (Map<String, Object> csvData : gstInvoiceData) {
            Map<String, Object> dataMap = (Map<String, Object>) csvData.get("map");
            List<String> gstHeaders = (List<String>) dataMap.get("headers");
            List<List<Object>> fileData = (List<List<Object>>) dataMap.get("rows");
            String reportMonth = (String) csvData.get("report"); // Extract the month
            if (CollectionUtils.isNotEmpty(fileData)) {
                FileModel fileModel = fileGeneratorService.buildFileModel(
                        ReportFormat.CSV, gstHeaders, fileData, Map.of("headers", gstHeaders, "rows", fileData)
                );
                fileModel.setReportMonth(reportMonth);
                fileModels.add(fileModel);
            }
        }
        fileGeneratorService.generateZipFile(response, ReportFormat.CSV, Report.GST_INVOICE, mId, fileModels);
    }

  public List<GstReport> getMerchantGstInvoice(String mId, List<String> reportMonths) {
        SqlParameterSource parameters = new MapSqlParameterSource(Map.of(ReportingConstant.MID, mId, ReportingConstant.REPORT_MONTHS, reportMonths));
        return namedParameterJdbcTemplate.query(InvoiceQueries.JDBC_GST_INVOICE, parameters, new BeanPropertyRowMapper<>(GstReport.class));
    }

 public static final String JDBC_GST_INVOICE = """
                    SELECT TRANSACTION_NUMBER AS transactionNumber,
                    TO_CHAR(transaction_date, 'DD-MM-YY') as transactionDate,
                    TO_CHAR(transaction_date, 'Mon-YYYY') as transactionMonth,
                    CASE
                        WHEN MERCHANT_GST_CHARGED > 0 THEN MERCHANT_GST_CHARGED
                        ELSE
                    END AS gstCharged
                    FROM view_gst_invoice
                    WHERE MID = :mId
                    AND TO_CHAR(transaction_date, 'Mon-YYYY') IN IN (:reportMonth)
                    ORDER BY transaction_date DESC
            """;


public void generateZipFile(HttpServletResponse response, ReportFormat reportFormat, Report report, String mId, List<FileModel> fileModels) {
        log.info("Started zipFileGenerator for reportFormat: {}, report: {}, mId: {}, fileModels: {}", reportFormat, report.getName(),mId,fileModels);
        zipFileGenerator.generateZipFile(response, reportFormat, report, mId, fileModels);
    }

public void generateZipFile(HttpServletResponse response, ReportFormat reportFormat, Report report, String mId, List<FileModel> fileModels) {
        log.info("Starting ZIP file generation for report: {} and merchant ID: {}", report.getName(), mId);
        try {
            ByteArrayOutputStream byteArrayOutputStream;
            if(fileModels.size()> 1) {
               byteArrayOutputStream = generateZipFile(reportFormat, report, mId, fileModels);
            }else {
                byteArrayOutputStream = generateConsolidatedZipFile(reportFormat, report, mId, fileModels);
            }
            setHeader(response, "application/zip", mId + "_" + report.getName() + ".zip");
            response.setContentLength(byteArrayOutputStream.size());
            response.getOutputStream().write(byteArrayOutputStream.toByteArray());
            response.getOutputStream().flush();
            log.info("ZIP file successfully generated and sent to the response.");
        } catch (Exception e) {
            log.error("Error occurred during zipFileGenerator : {}", e.getMessage());
            throw new ReportingException(ErrorConstants.FILE_GENERATION_ERROR_CODE, MessageFormat.format(ErrorConstants.FILE_GENERATION_ERROR_MESSAGE, "zip", e.getMessage()));
        }

 private ByteArrayOutputStream generateZipFile(ReportFormat reportFormat, Report report, String mId, List<FileModel> fileModels) throws IOException {
        log.debug("Generating ZIP file for report: {} with format: {}", report.getName(), reportFormat.name());
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        for (FileModel fileModel : fileModels) {
            ReportFile reportFile = fileGenerator.generateFile(reportFormat, report, mId, fileModel);
            try (ZipOutputStream zos = new ZipOutputStream(byteArrayOutputStream)) {
                ZipEntry zipEntry = new ZipEntry(getZipFileName(reportFormat, report, fileModel));
                zos.putNextEntry(zipEntry);
                zos.write(reportFile.getContent());
                zos.closeEntry();
            }
        }
        log.debug("ZIP file generation completed for report: {}", report.getName());
        return byteArrayOutputStream;
    }

public ReportFile generateFile(ReportFormat reportFormat, Report report, String mId, FileModel fileModel) {
        logger.info("Generating file for report format: {}, report: {}, mId: {}", reportFormat, report.getName(), mId);
        switch (reportFormat) {
            case CSV -> {
                CSVFileModel csvFileModel = (CSVFileModel) fileModel;
                return CSVGenerator.csvFileGenerator(report.getName(), mId, csvFileModel.getHeaders(), csvFileModel.getFileData());
            }

  protected static ReportFile csvFileGenerator(String reportName, String mId, List<String> headerName, List<List<Object>> objects) {
        log.info("Started csv file generator for reportName : {}, mId {}, headerName: {},  objects.size: {}", reportName, mId, headerName, CollectionUtils.size(objects));
        String fileName = getFileName(reportName, mId);
        String csvContent = generateCSV(headerName, objects);
        return ReportFile.builder().name(fileName).content(csvContent.getBytes(StandardCharsets.UTF_8)).build();
    }
  private static String generateCSV(List<String> headers, List<List<Object>> objects) {
        StringBuilder csvContent = new StringBuilder();
        csvContent.append(String.join(",", headers)).append("\n");
        for (List<Object> rowData : objects) {
            String row = rowData.stream()
                    .map(data -> ObjectUtils.isNotEmpty(data) ? data.toString() : StringUtils.EMPTY)
                    .collect(Collectors.joining(","));
            csvContent.append(row).append("\n");
        }
        return csvContent.toString();
    }


here little bit change I need to do like maximum 5 lakhs data I need to fetch at once and if it's having 5L
 data then I need to fetch next 5 lakhs data now for every record it fetches we need to create one CSV like Feb-2025_GST_REPORT_1, Feb-2025_GST_REPORT_2 like that and 
at last I need to return all files in zip format but we need query for one month at once.
