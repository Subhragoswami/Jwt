 /**
     * Create Merchant User
     * @param merchantUserRequest
     * @return MerchantUserResponse
     */
    @PostMapping
    @Operation(summary = "User Creation for Merchant by Merchant Admin or Super Admin", description = "Merchant SuperAdmin/Admin will use this API to create Merchant Users for managing merchant portal")
    @PreAuthorize("hasAnyRole('ADMIN','SUPER_ADMIN')")
    public MerchantResponse<MerchantUserResponse> createMerchantUser(@RequestBody MerchantUserRequest merchantUserRequest) {
        log.info("Entity Creation : merchantRequest {}", merchantUserRequest);
        return merchantUserService.createMerchantUser(merchantUserRequest);
    }

    @PutMapping("/{userName}/{status}")
    @Operation(summary = "", description = "")
    @PreAuthorize("hasAnyRole('ADMIN','SUPER_ADMIN')")
    public MerchantResponse<MerchantUserResponse> updateUserStatus(@PathVariable String userName, @PathVariable UserStatus status) {
        return merchantUserService.updateUserStatus(userName, status);
    }

public MerchantResponse<MerchantUserResponse> updateUserStatus(String userName, UserStatus status){
        MerchantUserResponse merchantUserResponse = merchantUserDao.updateUserStatusByUserName(userName, status);
        return MerchantResponse.<MerchantUserResponse>builder().data(List.of(merchantUserResponse)).status(MerchantConstant.RESPONSE_SUCCESS).count(1L).total(1L).build();
    }

/**
     * Merchant User Creation
     *
     * @param merchantUserRequest MerchantUserRequest
     * @return MerchantUserResponse
     */
    public MerchantResponse<MerchantUserResponse> createMerchantUser(MerchantUserRequest merchantUserRequest) {
        //Step 1 : MerchantUserRequest validation
        merchantUserValidator.validateMerchantUserRequest(merchantUserRequest);

        //Step 2 : Set up the default value for Merchant and Merchant User
        MerchantUserDto merchantUserDto = merchantMapper.mapMerchantUserRequestToMerchantUserDto(merchantUserRequest);

        //Step 3 : Save the Merchant and Merchant User Data in DB
        merchantUserDto = merchantUserDao.saveMerchantUser(merchantUserDto, merchantUserRequest.getAssignedMIds().toArray(String[]::new));

        //Step 4 : Build MerchantResponse and return to caller
        MerchantUserResponse merchantUserResponse = merchantMapper.mapMerchantUserDtoToResponse(merchantUserDto);
        merchantUserResponse.setRole(merchantUserDao.getUserRoleName(merchantUserDto.getRole()));
        return MerchantResponse.<MerchantUserResponse>builder().data(List.of(merchantUserResponse)).status(MerchantConstant.RESPONSE_SUCCESS).count(1L).build();
    }
