    @GetMapping("/{mId}")
    @Operation(summary = "", description = "")
    public MerchantResponse<AlertManagementResponse> getLatestAlerts(@PageableDefault(size = 50, page = 0, sort = "createdAt", direction = Sort.Direction.DESC) Pageable pageable, @PathVariable String mId) {
        return alertManagementService.getLatestAlerts(pageable, mId);
    }

   public MerchantResponse<AlertManagementResponse> getLatestAlerts(Pageable pageable, String mid){
        alertValidator.validateMId(mid);
        List<AlertManagementResponse> alertManagementResponses = alertManagementDao.getUnreadAlerts(pageable, mid);
        return MerchantResponse.<AlertManagementResponse>builder().data(alertManagementResponses).status(MerchantConstant.RESPONSE_SUCCESS).count(alertManagementResponses.stream().count()).build();
    }

add logger and method defination like this

    /**
     * Update Merchant User Status
     *
     * @param userName String - Username or identifier of the user whose status needs to be updated
     * @return MerchantResponse<MerchantUserResponse> - Response containing updated user information
     */
    public MerchantResponse<MerchantUserResponse> updateUserStatus(String userName, UserStatus userStatus, MerchantUserUpdateRequest merchantUserUpdateRequest) {
        merchantUserValidator.validateUpdateRequest(merchantUserUpdateRequest, userName);
        log.info("Updating status of user '{}' to '{}'", userName, userStatus);
        MerchantUserResponse merchantUserResponse = merchantUserDao.updateUserStatusByUserName(userName, userStatus, merchantUserUpdateRequest);
        return MerchantResponse.<MerchantUserResponse>builder().data(List.of(merchantUserResponse)).status(MerchantConstant.RESPONSE_SUCCESS).count(1L).total(1L).build();
    }
