@RequiredArgsConstructor
@Service
@Profile("!local")
public class S3Service implements FileService {
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());
    private final S3Config s3Config;
    private final S3Client s3Client;

    /**
     * Uploads a file to S3 using the provided File object.
     * @param file the file to upload
     * @return the S3 key for the uploaded file
     */
    public String uploadFile(File file) {
        String key = System.currentTimeMillis() + "-" + file.getName();
        try {
            PutObjectRequest objectRequest = PutObjectRequest.builder().bucket(s3Config.getBucket()).key(file.getName()).build();
            s3Client.putObject(objectRequest, RequestBody.fromFile(file));
            return key;
        } catch (S3Exception e) {
            log.error("S3 - Failed to upload file:{} on s3 with error:{}", key, e.getMessage());
            throw new ReportingException(ErrorConstants.GENERIC_ERROR_CODE, e.getMessage());
        }
    }

    /**
     * Uploads a file to S3 using byte array content.
     * @param fileName the name of the file
     * @param fileContent the content of the file as byte array
     * @return the S3 key for the uploaded file
     */
    @Override
    public String uploadFile(String fileName, byte[] fileContent) {
        String key = System.currentTimeMillis() + "-" + fileName;
        try {
            PutObjectRequest objectRequest = PutObjectRequest.builder().bucket(s3Config.getBucket()).key(key).build();
            s3Client.putObject(objectRequest, RequestBody.fromBytes(fileContent));
            return key;
        } catch (S3Exception e) {
            log.error("S3 - Failed to upload file:{} on s3 with error:{}", key, e.getMessage());
            throw new ReportingException(ErrorConstants.GENERIC_ERROR_CODE, e.getMessage());
        }
    }

    /**
     *
     * @param file MultipartFile
     * @return
     */
    public String uploadFile(MultipartFile file) {
        String key = System.currentTimeMillis() + "-" + file.getName();
        try {
            PutObjectRequest objectRequest = PutObjectRequest.builder()
                    .bucket(s3Config.getBucket())
                    .key(key)
                    .contentType(file.getContentType())
                    .contentLength(file.getSize())
                    .build();
            PutObjectResponse putObjectResponse= s3Client.putObject(objectRequest, RequestBody.fromInputStream(file.getInputStream(), file.getSize()));
            log.info("putObjectResponse: {}", putObjectResponse);
            return key;
        } catch (S3Exception | IOException e) {
            log.error("S3 - Failed to upload file:{} on s3 with error:{}", key, e.getMessage());
            throw new ReportingException(ErrorConstants.GENERIC_ERROR_CODE, e.getMessage());
        }
    }

    /**
     * Download file content to HttpServletRepose.
     * @param response HttpServletResponse
     * @param fileName String
     */
    @Override
    public void downloadFile(HttpServletResponse response, String fileName) {
        try {
            GetObjectRequest getObjectRequest = GetObjectRequest.builder().bucket(s3Config.getBucket()).key(fileName).build();
            ResponseInputStream<GetObjectResponse> object = s3Client.getObject(getObjectRequest);
            object.transferTo(response.getOutputStream());
            response.getOutputStream().close();
        } catch (S3Exception | IOException e) {
            log.error("S3 - Failed to read file:{} from s3 with error: {}", fileName, e.getMessage());
            Object[] messageArgs = {fileName};
            throw new ReportingException(ErrorConstants.NOT_FOUND_ERROR_CODE, MessageFormat.format(ErrorConstants.NOT_FOUND_ERROR_MESSAGE, messageArgs));
        }
    }

    /**
     * Return list of S3 uploaded file keys.
     * @return List
     */
    public List<String> listObjects() {
        List<String> fileList = new ArrayList<>();
        try {
            ListObjectsV2Request listObjectsV2Request = ListObjectsV2Request.builder()
                    .bucket(s3Config.getBucket())
                    .build();
            log.info("s3Client : {}", s3Client);
            log.info("listObjectsV2Request :{}", listObjectsV2Request);
            ListObjectsV2Response listObjectsV2Response = s3Client.listObjectsV2(listObjectsV2Request);

            listObjectsV2Response.contents().forEach(s3Object -> {
                log.info("Object Key :{}", s3Object.key());
                fileList.add(s3Object.toString());
            });
        } catch (S3Exception e) {
            log.info("S3 - Failed to get list object from s3 with error: {}", e.getMessage());
            throw new ReportingException(ErrorConstants.GENERIC_ERROR_CODE, e.getMessage());
        }
        return fileList;
    }
}

@Service
public interface FileService {

    String uploadFile(String fileName, byte[] fileContent);

    //InputStream readFile(String key);

    void downloadFile(HttpServletResponse response, String fileName);

    //String getFilePath();
}

Parameter 2 of constructor in com.epay.reporting.service.FileGeneratorService required a bean of type 'com.epay.reporting.externalservice.S3Service' that could not be found.
