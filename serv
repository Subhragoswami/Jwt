@RestController
@AllArgsConstructor
@RequestMapping("/cards")
public class CardController {
    private final LoggerUtility logger = LoggerFactoryUtility.getLogger(this.getClass());
    private final CardService cardService;

    @PostMapping("/binCheck")
    @Operation(summary = "Card Number Verification")
    public TransactionResponse<EncryptedResponse> binCheck(@RequestBody EncryptedRequest encryptedRequest) {
        logger.info("binCheck request : " + encryptedRequest);
        return cardService.binCheck(encryptedRequest);
    }

}

public TransactionResponse<EncryptedResponse> binCheck(EncryptedRequest encryptedRequest) {
        logger.info("Preparing to fetch binCheck status.");
        String decryptedCardBin = encryptionDecryptionUtil.decryptData(ePayTokenProvider.getToken(), encryptedRequest.getEncryptedRequest());
        logger.debug("Convert CardBin String to request{}", decryptedCardBin);
        BinCheckRequest binCheckRequest = convertDectryptDataToBinCheckRequest(decryptedCardBin);
        logger.info("Calling Admin Service");
        TransactionResponse<BinCheckResponse> binCheckResponse = adminServicesClient.binCheckRequest(binCheckRequest);

        if (binCheckResponse.getStatus() == RESPONSE_FAILURE) {
            throw new TransactionException(ErrorConstants.INVALID_ERROR_CODE, MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE, "Card details", "Invalid card."));
        }

        String responseJson = convertBinCheckResponseToString(binCheckResponse);
        logger.info("Encrypting response from binCheck ");
        String encryptedResponse = encryptionDecryptionUtil.encryptData(ePayTokenProvider.getToken(), responseJson);
        EncryptedResponse response = EncryptedResponse.builder().encryptedResponse(encryptedResponse).build();
        return TransactionResponse.<EncryptedResponse>builder().status(RESPONSE_SUCCESS).count(1L).data(Collections.singletonList(response)).build();
    }

    private BinCheckRequest convertDectryptDataToBinCheckRequest(String decryptedCardBin) {
        try {
            return mapper.readValue(decryptedCardBin, BinCheckRequest.class);
        } catch (JsonProcessingException e) {
            throw new TransactionException(ErrorConstants.INVALID_ERROR_CODE, MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE, "Encrypt request", "Requested data is mismatched."));
        }
    }

    private String convertBinCheckResponseToString(TransactionResponse<BinCheckResponse> binCheckResponse) {

        try {
            return mapper.writeValueAsString(binCheckResponse.getData().getFirst());
        } catch (JsonProcessingException e) {
            throw new TransactionException(ErrorConstants.INVALID_ERROR_CODE, MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE, "Encrypt request", "Requested data is mismatched."));
        }
    }



please do check method names and write metod definations
