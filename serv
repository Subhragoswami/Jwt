public static Long calculateBackDateByFrequency(Frequency frequency, Long timeInMillis) {
        LocalDateTime inputDateTime = Instant.ofEpochMilli(timeInMillis).atZone(ZoneId.systemDefault()).toLocalDateTime();
        LocalTime reqTime = inputDateTime.toLocalTime();

        LocalDateTime now = LocalDateTime.now();
        LocalDateTime nextDateTime;

        switch (frequency) {
            case DAILY ->
                    nextDateTime = now.toLocalTime().isBefore(reqTime) ? LocalDateTime.of(now.toLocalDate().minusDays(1), reqTime) : LocalDateTime.of(now.toLocalDate(), reqTime);
            case MONTHLY ->
                    nextDateTime = now.toLocalTime().isBefore(reqTime) ? LocalDateTime.of(now.toLocalDate().minusMonths(1).withDayOfMonth(Math.min(now.toLocalDate().lengthOfMonth(), 30)), reqTime) : LocalDateTime.of(now.toLocalDate().withDayOfMonth(Math.min(now.toLocalDate().lengthOfMonth(), 30)), reqTime);
            case YEARLY ->
                    nextDateTime = now.toLocalTime().isBefore(reqTime) ? LocalDateTime.of(now.toLocalDate().minusYears(1), reqTime) : LocalDateTime.of(now.toLocalDate().withDayOfYear(1), reqTime);
            default -> throw new IllegalArgumentException("Invalid Frequency: " + frequency);
        }
