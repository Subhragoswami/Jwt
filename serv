 public ReportingResponse<TransactionDailyFailureReport> getTransactionDailyReport(String mid, String startDate, String endDate) {
        List<TransactionDailyFailureReport> summaryList = transactionDailyRepository.getSuccessFailureSummary(mid, startDate, endDate);
        Map<String, List<TransactionFailure>> failureMap = transactionDailyRepository.getFailureDetails(mid, startDate, endDate);
        for (TransactionDailyFailureReport report : summaryList) {
            BigDecimal totalFailedAmount = report.getTotalFailureAmount();
            List<TransactionFailure> failuresForDate = failureMap.getOrDefault(report.getTransactionDate(), new ArrayList<>());
            for (TransactionFailure failure : failuresForDate) {
                BigDecimal failurePercentage = totalFailedAmount.compareTo(BigDecimal.ZERO) > 0
                        ? failure.getFailureAmount().divide(totalFailedAmount, 2, RoundingMode.HALF_UP).multiply(BigDecimal.valueOf(100))
                        : BigDecimal.ZERO;
                failure.setFailurePercentage(failurePercentage);
            }

            report.setTransactionFailures(failuresForDate);
        }

        return ReportingResponse.<TransactionDailyFailureReport>builder().data(summaryList).build();
    }

@Slf4j
@Service
@RequiredArgsConstructor
public class TransactionReportService {

    private final TransactionDailyRepository transactionDailyRepository;

    /**
     * Fetches daily transaction failure reports with success and failure summaries.
     *
     * @param mid       Merchant ID
     * @param startDate Start date for the report
     * @param endDate   End date for the report
     * @return ReportingResponse containing a list of TransactionDailyFailureReport
     */
    public ReportingResponse<TransactionDailyFailureReport> getTransactionDailyReport(String mid, String startDate, String endDate) {
        log.info("Fetching transaction daily report for MID: {}, StartDate: {}, EndDate: {}", mid, startDate, endDate);

        // Fetch success and failure summary
        List<TransactionDailyFailureReport> summaryList = transactionDailyRepository.getSuccessFailureSummary(mid, startDate, endDate);
        log.info("Retrieved {} records for success and failure summary.", summaryList.size());

        // Fetch detailed failure data
        Map<String, List<TransactionFailure>> failureMap = transactionDailyRepository.getFailureDetails(mid, startDate, endDate);
        log.info("Retrieved failure details for {} transaction dates.", failureMap.size());

        // Combine summaries with failure details and calculate failure percentages
        summaryList.forEach(report -> {
            String transactionDate = report.getTransactionDate();
            BigDecimal totalFailedAmount = report.getTotalFailureAmount();
            List<TransactionFailure> failuresForDate = failureMap.getOrDefault(transactionDate, new ArrayList<>());

            log.debug("Processing transaction date: {}, TotalFailedAmount: {}", transactionDate, totalFailedAmount);

            // Calculate failure percentage for each failure reason
            failuresForDate.forEach(failure -> {
                BigDecimal failurePercentage = BigDecimal.ZERO;
                if (totalFailedAmount.compareTo(BigDecimal.ZERO) > 0) {
                    failurePercentage = failure.getFailureAmount()
                            .divide(totalFailedAmount, 2, RoundingMode.HALF_UP)
                            .multiply(BigDecimal.valueOf(100));
                }
                failure.setFailurePercentage(failurePercentage);
                log.debug("FailureReason: {}, FailureAmount: {}, FailurePercentage: {}",
                        failure.getFailureReason(), failure.getFailureAmount(), failurePercentage);
            });

            // Set failures for the current report
            report.setTransactionFailures(failuresForDate);
        });

        log.info("Completed transaction daily report generation for MID: {}", mid);
        return ReportingResponse.<TransactionDailyFailureReport>builder().data(summaryList).build();
    }
}

 for (TransactionFailure failure : failuresForDate) {
                BigDecimal failurePercentage = totalFailedAmount.compareTo(BigDecimal.ZERO) > 0
                        ? totalFailedAmount.divide(failure.getFailureAmount(), 2, RoundingMode.HALF_UP).multiply(BigDecimal.valueOf(100))
                        : BigDecimal.ZERO;
                failure.setFailurePercentage(failurePercentage);
            }
