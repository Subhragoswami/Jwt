   public List<TransactionSummaryReport> getTransactionSummaryReport(String mId, TransactionSummaryRequest transactionSummaryRequest) {
        log.info("Fetching transaction summary report for merchant ID: {} from {} to {}", mId, transactionSummaryRequest.getFromDate(), transactionSummaryRequest.getToDate());
        List<TransactionSummaryReport> transactionSummaryReports = new ArrayList<>();
        Optional<TransactionSummaryReport> transactionSummaryDataOptional = transactionDashboardRepository.getTransactionSummaryReport(mId, transactionSummaryRequest.getFromDate(), transactionSummaryRequest.getToDate());
        transactionSummaryDataOptional.ifPresentOrElse(transactionSummaryReport -> {
            List<TransactionFailureSummaryReport> transactionDailyFailures = transactionDashboardRepository.getTransactionFailureSummaryReport(mId, transactionSummaryRequest.getFromDate(), transactionSummaryRequest.getToDate());
            transactionDailyFailures.forEach(transactionDailyFailure -> transactionDailyFailure.setFailurePercentage(BigDecimal.valueOf((transactionDailyFailure.getFailureCount() * 100) / transactionSummaryReport.getTotalFailureCount()).setScale(2, RoundingMode.HALF_UP).doubleValue()));
            transactionSummaryReport.setTransactionDailyFailure(transactionDailyFailures);
            log.info("Transaction summary report for merchant ID: {} fetched successfully.", mId);
            transactionSummaryReports.add(transactionSummaryReport);
        }, () -> log.info("No transaction summary record found for mId: {}, fromDate: {} and toDate: {}", mId, transactionSummaryRequest.getFromDate(), transactionSummaryRequest.getToDate()));
        return transactionSummaryReports;
    }
