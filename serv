@PostMapping("/entity/mapping")
public MerchantResponse<String> mapEntity(@RequestBody UserEntityMappingRequest userEntityMappingRequest) {
    // Validate the request
    if (userEntityMappingRequest.getUserId() == null && userEntityMappingRequest.getUserName() == null) {
        throw new ValidationException("Either userId or userName must be provided.");
    }
    if (userEntityMappingRequest.getEntityId() == null) {
        throw new ValidationException("EntityId must be provided.");
    }

    // Fetch user details based on userId or userName
    MerchantUser user = userEntityMappingRequest.getUserId() != null
            ? merchantUserRepository.findById(userEntityMappingRequest.getUserId())
                    .orElseThrow(() -> new ValidationException("User not found with given userId."))
            : merchantUserRepository.findByUserName(userEntityMappingRequest.getUserName())
                    .orElseThrow(() -> new ValidationException("User not found with given userName."));

    // Validate the user status
    if (!"ACTIVE".equalsIgnoreCase(user.getStatus())) {
        throw new ValidationException("User is not active.");
    }

    // Fetch the role of the user using a join query
    String userRole = merchantUserRepository.findUserRoleByUserId(user.getId())
            .orElseThrow(() -> new ValidationException("Role not found for the user."));

    // Validate if the entityId is valid
    MerchantEntityGroup entityGroup = merchantEntityGroupRepository.findByMidAndEntityId(user.getMid(), userEntityMappingRequest.getEntityId())
            .orElseThrow(() -> new ValidationException("Invalid EntityId."));

    // If the user is a super admin, update the entityId
    if ("SUPER_ADMIN".equalsIgnoreCase(userRole)) {
        merchantEntityUserRepository.updateEntityIdForUser(user.getId(), userEntityMappingRequest.getEntityId());
    } else if ("ADMIN".equalsIgnoreCase(userRole)) {
        // Make the user a super admin
        user.setRoleId(userRoleRepository.findRoleIdByRoleName("SUPER_ADMIN")
                .orElseThrow(() -> new ValidationException("Super Admin role not found.")));
        merchantUserRepository.save(user);

        // Remove all existing records from MerchantEntityUser
        merchantEntityUserRepository.deleteByUserId(user.getId());

        // Insert a new record with the updated entityId and MID
        MerchantEntityUser newEntityUser = MerchantEntityUser.builder()
                .userId(user.getId())
                .entityId(userEntityMappingRequest.getEntityId())
                .mid(entityGroup.getMid())
                .createdBy("SYSTEM") // Replace with the current user
                .createdAt(System.currentTimeMillis())
                .updatedBy("SYSTEM") // Replace with the current user
                .updatedAt(System.currentTimeMillis())
                .build();
        merchantEntityUserRepository.save(newEntityUser);
    }

    return new MerchantResponse<>("Entity mapping updated successfully.");
}



.............



@Query("SELECT r.role FROM MerchantUser u JOIN UserRole r ON u.roleId = r.id WHERE u.id = :userId")
Optional<String> findUserRoleByUserId(@Param("userId") UUID userId);



Optional<MerchantUser> findByUserName(String userName);


@Query("SELECT r.id FROM UserRole r WHERE r.role = :roleName")
Optional<UUID> findRoleIdByRoleName(@Param("roleName") String roleName);

@Modifying
@Query("UPDATE MerchantEntityUser u SET u.entityId = :entityId WHERE u.userId = :userId")
void updateEntityIdForUser(@Param("userId") UUID userId, @Param("entityId") String entityId);




@Modifying
@Query("DELETE FROM MerchantEntityUser u WHERE u.userId = :userId")
void deleteByUserId(@Param("userId") UUID userId);


Optional<MerchantEntityGroup> findByMidAndEntityId(String mid, String entityId);
