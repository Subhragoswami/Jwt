    public void getDecryptKey(String mId, HttpServletResponse response){
        MerchantResponse<String> key = kmsClient.getDecryptedKey(mId);
        String password = passwordGenerator.generatePassword();
        ByteArrayOutputStream byteArrayOutputStream = PDFService.generatePDF(new DecryptionPdfBuilder(), key.getData().getFirst(), password);
        fileResponse(KeyType.DECRYPTION, KeyGenerationRequest.builder().mId(mId).build(),  response, byteArrayOutputStream);
    }

   @GetMapping("/encryptionDownload/{mId}")
    public void getDecryptKey(@PathVariable String mId, HttpServletResponse response) {
        keyService.getDecryptKey(mId, response);
    }



add logger and method description like this


  /**
     * Fetches encryption keys for the given merchant ID.
     *
     * @param mId String Merchant ID for which encryption keys are to be fetched.
     * @return MerchantResponse containing encryption key details.
     */
    @GetMapping("/encryption/{mId}")
    @Operation(summary = "Get Encryption Keys for Given MID", description = "Get Encryption Keys for Given MID")
    public MerchantResponse<KMSEncryptionKeysResponse> getMerchantEncryptionKeys(@PathVariable String mId) {
        logger.info(" Get Encryption Keys for for mId: {}", mId);
        return keyService.getMerchantEncryptionKeys(mId);
    }

   /**
     * This method generates an encryption key and creates a password-protected PDF file.
     * @param keyGenerationRequest KeyGenerationRequest The request object containing key generation details
     * @return  ByteArrayOutputStream containing the generated PDF file
     */
    private ByteArrayOutputStream encryptionKeyGeneration(KeyGenerationRequest keyGenerationRequest) {
        logger.info("Started encryptionKeyGeneration for request: {}", keyGenerationRequest);
        // Step 1 : Call the KMS APIs
        KMSEncryptionKeysResponse kmsEncryptionKeysResponse = keyDao.generateEncryptionKey(keyGenerationRequest);
        // Step 2 : Generate the Password-protected PDF File
        String password = passwordGenerator.generatePassword();
        ByteArrayOutputStream byteArrayOutputStream = PDFService.generatePDF(new EncryptionKeyPDFBuilder(), kmsEncryptionKeysResponse.getMek(), password);
        // Step 3 : Send Notification to Merchant
        keyDao.saveNotification(KeyType.ENCRYPTION, kmsEncryptionKeysResponse.getId(), "Encryption Key PDF file Password is :" + password, keyGenerationRequest.getMId());
        logger.info("Completed encryptionKeyGeneration for request: {}", keyGenerationRequest);
        return byteArrayOutputStream;
    }


/**
 * Endpoint to generate and download a password-protected decryption key PDF for a given Merchant ID.
 *
 * @param mId      Merchant ID for which the decryption key is to be generated.
 * @param response HttpServletResponse object to send the PDF as a downloadable response.
 */
@GetMapping("/encryptionDownload/{mId}")
@Operation(summary = "Download Decryption Key PDF", description = "Generate and download a password-protected PDF containing the decryption key for the given Merchant ID.")
public void getDecryptKey(@PathVariable String mId, HttpServletResponse response) {
    logger.info("Received request to download decryption key PDF for mId: {}", mId);
    keyService.getDecryptKey(mId, response);
    logger.info("Completed request to download decryption key PDF for mId: {}", mId);
}



/**
 * This method retrieves a decrypted key for the given Merchant ID (mId), 
 * generates a password-protected PDF, and sends it as a downloadable response.
 *
 * @param mId      Merchant ID for which the decryption key is to be fetched.
 * @param response HttpServletResponse object to send the generated PDF as a response.
 */
public void getDecryptKey(String mId, HttpServletResponse response) {
    logger.info("Started getDecryptKey process for mId: {}", mId);

    // Step 1: Fetch the decrypted key
    MerchantResponse<String> keyResponse = kmsClient.getDecryptedKey(mId);
    if (keyResponse == null || keyResponse.getData() == null || keyResponse.getData().isEmpty()) {
        logger.error("No decryption key found for mId: {}", mId);
        throw new MerchantException(ErrorConstants.KEY_NOT_FOUND_ERROR_CODE, "Decryption key not found for mId: " + mId);
    }
    String decryptedKey = keyResponse.getData().get(0); // Get the first key
    logger.info("Decryption key fetched successfully for mId: {}", mId);

    // Step 2: Generate a password for the PDF
    String password = passwordGenerator.generatePassword();
    logger.info("Generated password for PDF: {}", password);

    // Step 3: Create the password-protected PDF
    ByteArrayOutputStream pdfStream = PDFService.generatePDF(new DecryptionPdfBuilder(), decryptedKey, password);

    // Step 4: Send the PDF as a response
    fileResponse(
        KeyType.DECRYPTION,
        KeyGenerationRequest.builder().mId(mId).build(),
        response,
        pdfStream
    );

    logger.info("Completed getDecryptKey process for mId: {}", mId);
}
