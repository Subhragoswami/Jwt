    public void getDecryptKey(String mId, HttpServletResponse response){
        MerchantResponse<String> key = kmsClient.getDecryptedKey(mId);
        String password = passwordGenerator.generatePassword();
        ByteArrayOutputStream byteArrayOutputStream = PDFService.generatePDF(new DecryptionPdfBuilder(), key.getData().getFirst(), password);
        fileResponse(KeyType.DECRYPTION, KeyGenerationRequest.builder().mId(mId).build(),  response, byteArrayOutputStream);
    }

   @GetMapping("/encryptionDownload/{mId}")
    public void getDecryptKey(@PathVariable String mId, HttpServletResponse response) {
        keyService.getDecryptKey(mId, response);
    }



add logger and method description like this


  /**
     * Fetches encryption keys for the given merchant ID.
     *
     * @param mId String Merchant ID for which encryption keys are to be fetched.
     * @return MerchantResponse containing encryption key details.
     */
    @GetMapping("/encryption/{mId}")
    @Operation(summary = "Get Encryption Keys for Given MID", description = "Get Encryption Keys for Given MID")
    public MerchantResponse<KMSEncryptionKeysResponse> getMerchantEncryptionKeys(@PathVariable String mId) {
        logger.info(" Get Encryption Keys for for mId: {}", mId);
        return keyService.getMerchantEncryptionKeys(mId);
    }

   /**
     * This method generates an encryption key and creates a password-protected PDF file.
     * @param keyGenerationRequest KeyGenerationRequest The request object containing key generation details
     * @return  ByteArrayOutputStream containing the generated PDF file
     */
    private ByteArrayOutputStream encryptionKeyGeneration(KeyGenerationRequest keyGenerationRequest) {
        logger.info("Started encryptionKeyGeneration for request: {}", keyGenerationRequest);
        // Step 1 : Call the KMS APIs
        KMSEncryptionKeysResponse kmsEncryptionKeysResponse = keyDao.generateEncryptionKey(keyGenerationRequest);
        // Step 2 : Generate the Password-protected PDF File
        String password = passwordGenerator.generatePassword();
        ByteArrayOutputStream byteArrayOutputStream = PDFService.generatePDF(new EncryptionKeyPDFBuilder(), kmsEncryptionKeysResponse.getMek(), password);
        // Step 3 : Send Notification to Merchant
        keyDao.saveNotification(KeyType.ENCRYPTION, kmsEncryptionKeysResponse.getId(), "Encryption Key PDF file Password is :" + password, keyGenerationRequest.getMId());
        logger.info("Completed encryptionKeyGeneration for request: {}", keyGenerationRequest);
        return byteArrayOutputStream;
    }
