public MerchantResponse<CaptchaResponse> generateCaptcha(CaptchaRequest captchaRequest) {
        logger.info("generate captcha for RequestId: {}", captchaRequest.getRequestId());
        //Step 1 : Validate Captcha Request
       // captchaValidator.requestValidator(captchaRequest);
        return saveCaptcha(captchaRequest, false);
    }


    /**
     * ReGenerates a captcha and save it to the DB and returns a response.
     *
     * @param captchaRequest CaptchaRequest
     * @return merchantResponse containing CaptchaResponse
     */
    public MerchantResponse<CaptchaResponse> regenerateCaptcha(CaptchaRequest captchaRequest) {
        logger.info("generate captcha for RequestId: {}", captchaRequest.getRequestId());
        //Step 1 : Validate Captcha Request
        captchaValidator.regenerateValidator(captchaRequest);
        return saveCaptcha(captchaRequest, true);
    }

    /**
     * Generates the captcha image and encodes it in Base64
     *
     * @param captchaText String
     * @return Captcha
     */
    private String generateCaptchaImage(String captchaText) {
        logger.info("generated captcha text: {}", captchaText);
        BufferedImage image = captchaProducer.createImage(captchaText);
        return MerchantUtil.convertImageToBase64(image, "Captcha");
    }

    private MerchantResponse<CaptchaResponse> saveCaptcha(CaptchaRequest captchaRequest, boolean retry) {
        RequestType requestType = RequestType.getRequestType(captchaRequest.getRequestType());
        //Step 2 : Generate Captcha Text
        String captchaText = captchaProducer.createText();
        //Step 3 : Generate Captcha Image and convert into Base 64
        String base64Image = generateCaptchaImage(captchaText);
        String base64Audio = generateCaptchaAudio(captchaText, captchaRequest.getRequestId());
        //Step 3 : Save the Captcha into DB
        CaptchaDto captchaDto = captchaDao.save(captchaText, captchaRequest.getRequestId(), requestType, retry);
        //Step 4 : Build the Merchant Response
        logger.info("generate captcha completed for RequestId: {}", captchaRequest.getRequestId());
        return MerchantResponse.<CaptchaResponse>builder().data(List.of(captchaMapper.mapCaptchaDtoToCaptchaResponse(captchaDto, base64Image,base64Audio))).status(RESPONSE_SUCCESS).build();
    }

    /**
     * Generates an audio CAPTCHA and returns it as a Base64-encoded string.
     *
     * @param captchaText The text to convert into an audio CAPTCHA.
     * @param requestId   Unique identifier for tracking the request.
     * @return Base64-encoded string of the audio CAPTCHA.
     */
    public String generateCaptchaAudio(String captchaText, UUID requestId) {
        logger.info("Started generateAudioCaptcha for requestId: {}", requestId);

        return Optional.ofNullable(captchaText)
                .map(text -> VoiceCaptchaUtil.generateAudioCaptcha(text, requestId))
                .map(data -> encodeToBase64(data, requestId))
                .orElseGet(() -> {
                    logger.warn("Captcha text is null for requestId: {}", requestId);
                    return "";
                });
    }

    /**
     * Encodes a byte array to a Base64 string using Java 8 Streams.
     *
     * @param data      The byte array to encode.
     * @param requestId The request ID for logging.
     * @return The Base64-encoded string.
     */
    private String encodeToBase64(byte[] data, UUID requestId) {
        return Optional.ofNullable(data)
                .filter(d -> d.length > 0)
                .map(d -> {
                    logger.info("Encoding {} bytes to Base64 for requestId: {}", d.length, requestId);

                    // Standard Java Base64 Encoding
                    String base64Encoded = Base64.getEncoder().encodeToString(d);

                    // Alternative: Apache Commons Codec (uncomment if needed)
                    // String base64Encoded = Base64.encodeBase64String(d);

                    return base64Encoded;
                })
                .orElseGet(() -> {
                    logger.warn("Empty byte array for requestId: {}", requestId);
                    return "";
                });
    }







public static byte[] generateAudioCaptcha(String text, UUID requestId) {
    String uniqueFileName = "speech_" + System.currentTimeMillis() + "_" + requestId;
    File tempFile = null;

    try {
        tempFile = File.createTempFile(uniqueFileName, ".wav");
        tempFile.deleteOnExit();

        Voice voice = VoiceManager.getInstance().getVoice(VOICE_NAME);
        if (voice == null) {
            logger.error("Voice '{}' not found. Returning empty byte array.", VOICE_NAME);
            return new byte[0];
        }

        voice.allocate();

        // Create AudioPlayer
        SingleFileAudioPlayer audioPlayer = new SingleFileAudioPlayer(
                tempFile.getAbsolutePath().replace(".wav", ""), 
                AudioFileFormat.Type.WAVE
        );

        voice.setAudioPlayer(audioPlayer);
        voice.setRate(100);
        voice.setPitch(75);
        voice.speak(text);
        
        // Properly close resources
        voice.deallocate();
        audioPlayer.close();

        // Check if the file exists and is valid
        if (!tempFile.exists() || tempFile.length() == 0) {
            logger.error("Generated audio file is empty or missing for requestId: {}", requestId);
            return new byte[0];
        }

        logger.info("Audio file generated successfully. Size: {} bytes for requestId: {}", tempFile.length(), requestId);
        return fileToByteArray(tempFile);

    } catch (Exception e) {
        logger.error("Error generating speech audio for requestId: {}", requestId, e);
        throw new MerchantException(ErrorConstants.GENERATION_ERROR_CODE,
                MessageFormat.format(ErrorConstants.GENERATION_ERROR_MESSAGE, requestId));

    } finally {
        if (tempFile != null && tempFile.exists()) {
            if (tempFile.delete()) {
                logger.info("Temporary file deleted: {}", tempFile.getAbsolutePath());
            } else {
                logger.warn("Failed to delete temporary file: {}", tempFile.getAbsolutePath());
            }
        }
    }
}