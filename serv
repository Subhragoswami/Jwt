 public Long countTransactionsWithFilters(String orderNo, String sbiepayOrderId, String atrn, String bankRefNo, Long startDate, Long endDate, String status) {
        return transactionViewRefundRepository.countTransactionsWithFilters(orderNo, sbiepayOrderId, atrn, bankRefNo, startDate, endDate, status);

    }

    public Long countTransactionsWithFilters(String mId, String startDate, String endDate) {
        return viewRecentTxnRepository.countTransactionsByMidAndDateRange(mId, startDate, endDate);
    }

    public Long countOrderAndRefundTransactionsWithFilters(String mID, long startMilliseconds, long endMilliseconds) {
        return transactionRepository.countOrderAndRefundTransactionsWithFilters(mID, startMilliseconds, endMilliseconds);
    }

    public boolean isTransactionValidForBooking(String sbiOrderRefNumber, List<String> statusList) {
        return transactionRepository.countBySbiOrderRefNumberAndTransactionStatusInNative(sbiOrderRefNumber, statusList) > 0;
    }

    public Object[] getRfc(String altHash) {
        logger.info("Fetching data from MerchantOrderPayment and Order table.");
        return transactionRepository.rfcCount(altHash);
    }
