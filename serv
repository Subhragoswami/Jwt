    @GetMapping("/{mId}")
    @Operation(summary = "", description = "")
    public MerchantResponse<AlertManagementResponse> getLatestAlerts(@PageableDefault(size = 50, page = 0, sort = "createdAt", direction = Sort.Direction.DESC) Pageable pageable, @PathVariable String mId) {
        return alertManagementService.getLatestAlerts(pageable, mId);
    }

   public MerchantResponse<AlertManagementResponse> getLatestAlerts(Pageable pageable, String mid){
        alertValidator.validateMId(mid);
        List<AlertManagementResponse> alertManagementResponses = alertManagementDao.getUnreadAlerts(pageable, mid);
        return MerchantResponse.<AlertManagementResponse>builder().data(alertManagementResponses).status(MerchantConstant.RESPONSE_SUCCESS).count(alertManagementResponses.stream().count()).build();
    }

add logger and method defination like this

    /**
     * Update Merchant User Status
     *
     * @param userName String - Username or identifier of the user whose status needs to be updated
     * @return MerchantResponse<MerchantUserResponse> - Response containing updated user information
     */
    public MerchantResponse<MerchantUserResponse> updateUserStatus(String userName, UserStatus userStatus, MerchantUserUpdateRequest merchantUserUpdateRequest) {
        merchantUserValidator.validateUpdateRequest(merchantUserUpdateRequest, userName);
        log.info("Updating status of user '{}' to '{}'", userName, userStatus);
        MerchantUserResponse merchantUserResponse = merchantUserDao.updateUserStatusByUserName(userName, userStatus, merchantUserUpdateRequest);
        return MerchantResponse.<MerchantUserResponse>builder().data(List.of(merchantUserResponse)).status(MerchantConstant.RESPONSE_SUCCESS).count(1L).total(1L).build();
    }



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import io.swagger.v3.oas.annotations.Operation;
import java.util.List;

@RestController
public class AlertManagementController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AlertManagementController.class);

    private final AlertManagementService alertManagementService;

    public AlertManagementController(AlertManagementService alertManagementService) {
        this.alertManagementService = alertManagementService;
    }

    /**
     * Fetches the latest unread alerts for a given merchant ID with pagination.
     *
     * @param pageable Pageable - the pagination and sorting information
     * @param mId      String - the merchant ID for which to fetch alerts
     * @return MerchantResponse<AlertManagementResponse> - response containing a list of alerts
     */
    @GetMapping("/{mId}")
    @Operation(summary = "Retrieve latest alerts", description = "Fetches the latest unread alerts for a given merchant ID.")
    public MerchantResponse<AlertManagementResponse> getLatestAlerts(
            @PageableDefault(size = 50, page = 0, sort = "createdAt", direction = Sort.Direction.DESC) Pageable pageable,
            @PathVariable String mId) {
        LOGGER.info("Fetching latest alerts for merchant ID: {}", mId);
        return alertManagementService.getLatestAlerts(pageable, mId);
    }
}



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Pageable;
import java.util.List;

@Service
public class AlertManagementService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AlertManagementService.class);

    private final AlertManagementDao alertManagementDao;
    private final AlertValidator alertValidator;

    public AlertManagementService(AlertManagementDao alertManagementDao, AlertValidator alertValidator) {
        this.alertManagementDao = alertManagementDao;
        this.alertValidator = alertValidator;
    }

    /**
     * Fetches unread alerts for a given merchant ID with pagination.
     *
     * @param pageable Pageable - the pagination and sorting information
     * @param mid      String - the merchant ID for which to fetch alerts
     * @return MerchantResponse<AlertManagementResponse> - response containing a list of alerts
     */
    public MerchantResponse<AlertManagementResponse> getLatestAlerts(Pageable pageable, String mid) {
        alertValidator.validateMId(mid);
        LOGGER.info("Fetching unread alerts for merchant ID: {}", mid);

        List<AlertManagementResponse> alertManagementResponses = alertManagementDao.getUnreadAlerts(pageable, mid);
        LOGGER.info("Retrieved {} unread alerts for merchant ID: {}", alertManagementResponses.size(), mid);

        return MerchantResponse.<AlertManagementResponse>builder()
                .data(alertManagementResponses)
                .status(MerchantConstant.RESPONSE_SUCCESS)
                .count((long) alertManagementResponses.size())
                .build();
    }
}


import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.UUID;

public interface AlertManagementRepository extends JpaRepository<AlertManagement, UUID> {

    /**
     * Update the 'isViewed' field to true for a specific merchant ID and alert ID.
     *
     * @param mId      the merchant ID
     * @param alertId  the alert ID
     */
    @Modifying
    @Transactional
    @Query("UPDATE AlertManagement a SET a.isViewed = true WHERE a.mId = :mId AND a.alertId = :alertId")
    void updateAlertViewedStatus(@Param("mId") String mId, @Param("alertId") UUID alertId);
}
