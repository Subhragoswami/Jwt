 public void validateLogo(MultipartFile logoFile, boolean isUpdateCall) {
        errorDtoList = new ArrayList<>();
        String errorCd = "Logo file";
        String errorMsg = StringUtils.EMPTY;
        boolean isFileNotPresent = Objects.isNull(logoFile) || logoFile.isEmpty();
        boolean isFilePresent = !Objects.isNull(logoFile) || !logoFile.isEmpty();
        if (isUpdateCall && isFileNotPresent) {
            return;
        }
        if (isFilePresent) {
            if (!StringUtils.containsAnyIgnoreCase(logoFile.getContentType(), LOGO_FILE_TYPES)) {
                errorCd = LOGO_FILE_TYPE;
                errorMsg = "Valid logo file types are " + Arrays.toString(LOGO_FILE_TYPES);
            } else if (logoFile.getOriginalFilename().toLowerCase().contains("null")) {
                errorCd = "LOGO_FILE_NAME";
                errorMsg = "logofile can't contain null in the name";
            } else if (isLogoFileSizeInvalid(logoFile.getSize())) {
                errorCd = LOGO_FILE_SIZE;
                errorMsg = "Valid file size: " + merchantConfig.getLogoMaxSize();
            } else {
                BufferedImage image;
                try {
                    image = ImageIO.read(new ByteArrayInputStream(logoFile.getBytes()));
                    if (null != image && (image.getHeight() > merchantConfig.getLogoHeight() || image.getWidth() > merchantConfig.getLogoWidth())) {
                        errorCd = "Logo dimension";
                        errorMsg = "Valid dimension is " + merchantConfig.getLogoWidth() + "x" + merchantConfig.getLogoHeight();
                    }
                } catch (IOException e) {
                    String errMsg = MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE, LOGO_FILE, "Unable to process logo file.");
                    log.error(errMsg, e);
                    addError(ErrorConstants.INVALID_ERROR_CODE, errMsg);
                    throwIfErrors();
                }
            }
            if (StringUtils.isNotEmpty(errorMsg)) {
                addError(INVALID_ERROR_CODE, INVALID_ERROR_MESSAGE, errorCd, errorMsg);
            }
            throwIfErrors();
        }
    }
