    /**
     * Retrieves the latest unread alerts for a given merchant ID (mId).
     * This method fetches the alerts in descending order based on the creation date and returns them as a list of AlertManagementResponse objects.
     *
     * @param mId The merchant ID for which the unread alerts are to be fetched.
     * @return A list of AlertManagementResponse objects representing the alerts for the given merchant ID.
     */
    public Page<AlertManagementResponse> getLatestAlertDescription(String mId, boolean getAll, Pageable pageable) {
        // Fetch alerts based on MID with pagination (latest 50)
        Page<AlertManagement> alertManagementList = getAll ? alertManagementRepository.findByMId(mId, pageable) :
                alertManagementRepository.findUnreadAlertsByMId(mId, pageable);
        // Get user roles
//        List<String> userRoles = EPayIdentityUtil.getUserPrincipal().getUserRole();
        List<String> userRoles = List.of("ADMIN");
        // If user role is "USER", filter alerts accordingly
        List<AlertManagement> filteredAlerts = alertManagementList.toList();
        if (checkIsUserRole(userRoles)) {
            List<AlertMasterDto> accountExpiryAlerts = findAllAlertByName(ACCOUNT_EXPIRY);
            filteredAlerts = filterAlertsForUserRole(filteredAlerts, collectAlertMasterId(accountExpiryAlerts));
        }

        List<AlertManagementResponse> responses = alertMapper.alertManagementEntityToResponse(filteredAlerts);
        return new PageImpl<>(responses, pageable, alertManagementList.getTotalElements());
    }

    /**
     * Retrieves the alerts for a given merchant ID (mId).
     * This method fetches the alerts in descending order based on the creation date and returns them as a list of AlertManagementResponse objects.
     *
     * @param mId The merchant ID for which the unread alerts are to be fetched.
     * @return A list of AlertManagementResponse objects representing the alerts for the given merchant ID.
     */
    public Page<AlertManagementResponse> getLatestAlerts(String mId, Pageable pageable) {
        Page<AlertManagement> alertManagementPage = alertManagementRepository.findByMId(mId, pageable);
        //List<String> userRoles = EPayIdentityUtil.getUserPrincipal().getUserRole();
        List<String> userRoles = List.of("ADMIN");
        List<AlertManagement> filteredAlerts = alertManagementPage.toList();
        if (checkIsUserRole(userRoles)) {
            List<AlertMasterDto> accountExpiryAlerts = findAllAlertByName(ACCOUNT_EXPIRY);
            filteredAlerts = filterAlertsForUserRole(filteredAlerts, collectAlertMasterId(accountExpiryAlerts));
        }

        List<AlertManagementResponse> responses = alertMapper.alertManagementEntityToResponse(filteredAlerts);
        return new PageImpl<>(responses, pageable, alertManagementPage.getTotalElements());
    }

here create two method which will call getLatestAlertDescription and pass getAll value 
