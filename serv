public class BaseValidator {
    private static final LoggerUtility log = LoggerFactoryUtility.getLogger(BaseValidator.class);
    List<ErrorDto> errorDtoList;

    /**
     * Checks if a given value is empty or null, and adds an error if it is.
     *
     * @param value - The value to check
     * @param fieldName - The name of the field to include in the error message
     */
    void checkMandatoryField(String value, String fieldName) {
        if (StringUtils.isEmpty(value)) {
            log.error("Field '{}' is mandatory and cannot be empty.", fieldName);
            addError(fieldName, ErrorConstants.MANDATORY_ERROR_CODE, ErrorConstants.MANDATORY_ERROR_MESSAGE);
        }
    }
    /**
     * Checks if a given object is null or empty, and adds an error if it is.
     *
     * @param value - The object to check
     * @param fieldName - The name of the field to include in the error message
     */
    void checkMandatoryField(Object value, String fieldName) {
        if (ObjectUtils.isEmpty(value)) {
            log.error("Field '{}' is mandatory and cannot be null or empty.", fieldName);
            addError(fieldName, ErrorConstants.MANDATORY_ERROR_CODE, ErrorConstants.MANDATORY_ERROR_MESSAGE);
        }
    }
    /**
     * Checks if a given collection is empty or null, and adds an error if it is.
     *
     * @param collection - The collection to check
     * @param fieldName - The name of the field to include in the error message
     */
    void checkMandatoryCollection(Collection collection, String fieldName) {
        if (CollectionUtils.isEmpty(collection)) {
            log.error("Collection field '{}' is mandatory and cannot be empty.", fieldName);
            addError(fieldName, ErrorConstants.MANDATORY_ERROR_CODE, ErrorConstants.MANDATORY_ERROR_MESSAGE);
        }
    }
    /**
     * Checks if all provided values are empty or null, and adds an error if they are.
     *
     * @param fieldName - The name of the field to include in the error message
     * @param values - The values to check
     */
    void checkMandatoryFields(String fieldName, String... values) {
        boolean allEmpty = Arrays.stream(values).allMatch(StringUtils::isEmpty);
        if (allEmpty) {
            log.error("Fields '{}' are mandatory and cannot be all empty.", fieldName);
            addError(fieldName, ErrorConstants.MANDATORY_ERROR_CODE, ErrorConstants.MANDATORY_ERROR_MESSAGE);
        }
    }

    /**
     * Checks if a given date is valid, adds an error if it is not.
     *
     * @param date - The date value to check
     * @param fieldName - The name of the field to include in the error message
     */
    void checkMandatoryDateField(Long date, String fieldName) {
        if (ObjectUtils.isEmpty(date) || date < 0) {
            log.error("Field '{}' contains an invalid date value.", fieldName);
            addError(fieldName, ErrorConstants.MANDATORY_ERROR_CODE, ErrorConstants.MANDATORY_ERROR_MESSAGE);
        }
    }

    /**
     * Validates if a given field's length exceeds a maximum value.
     *
     * @param value - The value to check
     * @param maxLength - The maximum allowed length
     * @param fieldName - The name of the field to include in the error message
     */
    void validateFieldLength(String value, int maxLength, String fieldName) {
        if (StringUtils.isNotEmpty(value) && value.length() > maxLength) {
            log.error("Field '{}' exceeds the maximum allowed length of {} characters.", fieldName, maxLength);
            addError(fieldName, ErrorConstants.INVALID_ERROR_CODE, "Max allowed length is " + maxLength);
        }
    }

    /**
     * Validates if a given date is not in the future and not too far in the past.
     *
     * @param date - The date value to check
     * @param fieldName - The name of the field to include in the error message
     */
    void validateDateFieldForPastDate(Long date, String fieldName) {
        if (date < ReportingConstant.MIN_TIMESTAMP || System.currentTimeMillis() < date) {
            log.error("Field '{}' contains a future or invalid date.", fieldName);
            addError(ErrorConstants.INVALID_ERROR_CODE, ErrorConstants.INVALID_ERROR_MESSAGE, fieldName, "Given date is greater then current date or not having format");
        }
    }


    /**
     * Validates if a given date is not in the past and is within a valid range.
     *
     * @param date - The date value to check
     * @param fieldName - The name of the field to include in the error message
     */
    void validateDateFieldForFutureDate(Long date, String fieldName) {
        if (date > ReportingConstant.MAX_TIMESTAMP || System.currentTimeMillis() > date) {
            log.error("Field '{}' contains an invalid future date.", fieldName);
            addError(ErrorConstants.INVALID_ERROR_CODE, ErrorConstants.INVALID_ERROR_MESSAGE, fieldName, "Given date is less then current date or not having format");
        }
    }
    /**
     * Validates if a value matches the provided regex pattern and if its length is valid.
     *
     * @param value - The value to check
     * @param maxLength - The maximum allowed length
     * @param regex - The regex pattern to match the value against
     * @param fieldName - The name of the field to include in the error message
     * @param message - The error message to display if validation fails
     */
    void validateFieldWithRegex(String value, int maxLength, String regex, String fieldName, String message) {
        if (StringUtils.isNotEmpty(value) && (value.length() > maxLength || validate(value, regex))) {
            log.error("Field '{}' contains an invalid value or exceeds maximum length.", fieldName);
            addError(fieldName, ErrorConstants.INVALID_ERROR_CODE, message + " " + maxLength);
        }
    }


    /**
     * Validates if a value matches the provided regex pattern.
     *
     * @param value - The value to check
     * @param regex - The regex pattern to match the value against
     * @param fieldName - The name of the field to include in the error message
     * @param message - The error message to display if validation fails
     */
    void validateFieldWithRegex(String value, String regex, String fieldName, String message) {
        if (StringUtils.isNotEmpty(value) && validate(value, regex)) {
            log.error("Field '{}' contains an invalid value '{}'.", fieldName, value);
            addError(fieldName, ErrorConstants.INVALID_ERROR_CODE, MessageFormat.format(message, fieldName, value));
        }
    }

    /**
     * Validates if a value matches the valid values list.
     *
     * @param value - The value to check
     * @param validValue - The valid value to check against
     * @param fieldName - The name of the field to include in the error message
     */
    void validateFieldValue(String value, String validValue, String fieldName) {
        if (!validValue.equalsIgnoreCase(value)) {
            log.error("Field '{}' contains an invalid value '{}'.", fieldName, value);
            addError(INVALID_ERROR_CODE, INVALID_ERROR_MESSAGE, fieldName, "Valid Values are " + validValue);
        }
    }

    /**
     * Validates if a value matches any of the values in the valid values list.
     *
     * @param value - The value to check
     * @param validValues - The list of valid values to check against
     * @param fieldName - The name of the field to include in the error message
     */
    void validateFieldValue(String value, List<String> validValues, String fieldName) {
        boolean isValid = validValues.stream().anyMatch(validValue -> validValue.equalsIgnoreCase(value));
        if (!isValid) {
            log.error("Field '{}' contains an invalid value '{}'.", fieldName, value);
            addError(INVALID_ERROR_CODE, INVALID_ERROR_MESSAGE, fieldName, "Valid Values are " + validValues);
        }

    }

    /**
     * Adds an error message to the error list.
     *
     * @param fieldName - The name of the field to include in the error message
     * @param errorCode - The error code to associate with the error
     * @param errorMessage - The error message to display
     */
    void addError(String fieldName, String errorCode, String errorMessage) {
        errorDtoList.add(ErrorDto.builder().errorCode(errorCode).errorMessage(MessageFormat.format(errorMessage, fieldName)).build());
    }

    /**
     * Adds an error message to the error list with additional field names.
     *
     * @param errorCode - The error code to associate with the error
     * @param errorMessage - The error message to display
     * @param fieldNames - Additional field names to include in the error message
     */
    void addError(String errorCode, String errorMessage, Object... fieldNames) {
        errorDtoList.add(ErrorDto.builder().errorCode(errorCode).errorMessage(MessageFormat.format(errorMessage, fieldNames)).build());
    }
    /**
     * Throws a ValidationException if any errors were found during validation.
     */
    void throwIfErrors() {
        if (!errorDtoList.isEmpty()) {
            log.error("Validation failed with errors: {}", errorDtoList);
            throw new ValidationException(new ArrayList<>(errorDtoList));
        }
    }
    /**
     * Validates if a value matches the provided regex pattern.
     *
     * @param value - The value to check
     * @param regex - The regex pattern to match the value against
     * @return true if the value does not match the regex, false otherwise
     */
    boolean validate(String value, String regex) {
        return !Pattern.matches(regex, value);
    }
}




public class InvoiceValidator extends BaseValidator {
    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern("MMM-yyyy", Locale.ENGLISH);

    public void isValidMonthYear(List<String> date) {
        for (String d : date) {
            try {
                YearMonth.parse(d, FORMATTER);
            } catch (DateTimeParseException e) {
                errorDtoList.add(ErrorDto.builder().errorCode(ErrorConstants.DATE_FORMAT_ERROR_CODE).errorMessage(MessageFormat.format(ErrorConstants.DATE_FORMAT_ERROR_MESSAGE, "MMM-yyyy")).build());
                throwIfErrors();
            }
        }
    }



still it's going to Exception type
