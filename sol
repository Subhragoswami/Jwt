import org.apache.commons.codec.binary.Base64;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.Optional;
import java.util.UUID;

public class CaptchaService {
    private static final Logger logger = LoggerFactory.getLogger(CaptchaService.class);

    public String generateCaptchaAudio(String captchaText, UUID requestId) {
        logger.info("Started generateCaptchaAudio for requestId: {}", requestId);

        return Optional.ofNullable(captchaText)
                .map(text -> {
                    byte[] audioData = VoiceCaptchaUtil.generateAudioCaptcha(text, requestId);
                    
                    // Log the generated byte array length
                    logger.info("Generated audio data length: {} for requestId: {}", 
                                audioData != null ? audioData.length : 0, requestId);

                    // Write audio data to a temporary file for manual testing
                    if (audioData != null && audioData.length > 0) {
                        try {
                            Files.write(Paths.get("test_audio.wav"), audioData);
                            logger.info("Audio file written: test_audio.wav for requestId: {}", requestId);
                        } catch (Exception e) {
                            logger.error("Failed to write audio file for requestId: {}", requestId, e);
                        }
                    } else {
                        logger.warn("Generated empty audio data for requestId: {}", requestId);
                    }

                    return audioData;
                })
                .map(data -> encodeToBase64(data, requestId))
                .orElseGet(() -> {
                    logger.warn("Captcha text is null for requestId: {}", requestId);
                    return "";
                });
    }

    /**
     * Encodes a byte array to a Base64 string using Java 8 Streams.
     *
     * @param data      The byte array to encode.
     * @param requestId The request ID for logging.
     * @return The Base64-encoded string.
     */
    private String encodeToBase64(byte[] data, UUID requestId) {
        return Optional.ofNullable(data)
                .filter(d -> d.length > 0)
                .map(d -> {
                    logger.info("Encoding {} bytes to Base64 for requestId: {}", d.length, requestId);
                    
                    // Standard Java Base64 Encoding
                    String base64Encoded = Base64.getEncoder().encodeToString(d);

                    // Alternative: Apache Commons Codec (uncomment if needed)
                    // String base64Encoded = Base64.encodeBase64String(d);

                    return base64Encoded;
                })
                .orElseGet(() -> {
                    logger.warn("Empty byte array for requestId: {}", requestId);
                    return "";
                });
    }
}










import org.apache.commons.codec.binary.Base64;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.Optional;
import java.util.UUID;

public class CaptchaService {
    private static final Logger logger = LoggerFactory.getLogger(CaptchaService.class);

    public MerchantResponse<CaptchaResponse> generateCaptcha(CaptchaRequest captchaRequest) {
        logger.info("generate captcha for RequestId: {}", captchaRequest.getRequestId());
        return saveCaptcha(captchaRequest, false);
    }

    public MerchantResponse<CaptchaResponse> regenerateCaptcha(CaptchaRequest captchaRequest) {
        logger.info("regenerate captcha for RequestId: {}", captchaRequest.getRequestId());
        captchaValidator.regenerateValidator(captchaRequest);
        return saveCaptcha(captchaRequest, true);
    }

    private String generateCaptchaImage(String captchaText) {
        logger.info("Generated captcha text: {}", captchaText);
        BufferedImage image = captchaProducer.createImage(captchaText);
        return MerchantUtil.convertImageToBase64(image, "Captcha");
    }

    private MerchantResponse<CaptchaResponse> saveCaptcha(CaptchaRequest captchaRequest, boolean retry) {
        RequestType requestType = RequestType.getRequestType(captchaRequest.getRequestType());

        // Step 2: Generate Captcha Text
        String captchaText = captchaProducer.createText();

        // Step 3: Generate Captcha Image and convert into Base64
        String base64Image = generateCaptchaImage(captchaText);
        String base64Audio = generateCaptchaAudio(captchaText, captchaRequest.getRequestId());

        // Step 4: Save the Captcha into DB
        CaptchaDto captchaDto = captchaDao.save(captchaText, captchaRequest.getRequestId(), requestType, retry);

        logger.info("Captcha generation completed for RequestId: {}", captchaRequest.getRequestId());

        return MerchantResponse.<CaptchaResponse>builder()
                .data(List.of(captchaMapper.mapCaptchaDtoToCaptchaResponse(captchaDto, base64Image, base64Audio)))
                .status(RESPONSE_SUCCESS)
                .build();
    }

    public String generateCaptchaAudio(String captchaText, UUID requestId) {
        logger.info("Started generateAudioCaptcha for requestId: {}", requestId);

        return Optional.ofNullable(captchaText)
                .map(text -> {
                    byte[] audioData = VoiceCaptchaUtil.generateAudioCaptcha(text, requestId);

                    // Log the generated byte array length
                    logger.info("Generated audio data length: {} for requestId: {}", 
                                audioData != null ? audioData.length : 0, requestId);

                    // Write audio data to a temporary file for manual testing
                    if (audioData != null && audioData.length > 0) {
                        try {
                            Files.write(Paths.get("test_audio.wav"), audioData);
                            logger.info("Audio file written: test_audio.wav for RequestId: {}", requestId);
                        } catch (Exception e) {
                            logger.error("Failed to write audio file for RequestId: {}", requestId, e);
                        }
                    } else {
                        logger.warn("Generated empty audio data for RequestId: {}", requestId);
                    }

                    return audioData;
                })
                .map(data -> encodeToBase64(data, requestId))
                .orElseGet(() -> {
                    logger.warn("Captcha text is null for RequestId: {}", requestId);
                    return "";
                });
    }

    private String encodeToBase64(byte[] data, UUID requestId) {
        return Optional.ofNullable(data)
                .filter(d -> d.length > 0)
                .map(d -> {
                    logger.info("Encoding {} bytes to Base64 for RequestId: {}", d.length, requestId);

                    // Standard Java Base64 Encoding
                    String base64Encoded = Base64.getEncoder().encodeToString(d);

                    // Alternative: Apache Commons Codec (uncomment if needed)
                    // String base64Encoded = Base64.encodeBase64String(d);

                    return base64Encoded;
                })
                .orElseGet(() -> {
                    logger.warn("Empty byte array for RequestId: {}", requestId);
                    return "";
                });
    }
}
